{"version":3,"sources":["multis/core.cljs"],"mappings":";;;;;;;;;;;;;;AAqBA,AAACA;AACD,AAACC;AAOD,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;AAGD,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA;;AAAA,AAAA,AAAAI,AAAAN;AAAA,AAAAO,AAAAP;AAAA,AAAA;;AAAA;;;;AAAA,AAAA,AAAAQ,AAAA,AAAAT;;AAAA,AAEA,AAAA,AAAAU,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AACP,AAAAC,AAAM,AAAAI;AAAN,AAAA,AAAAH,AAAAD;AAAAE,AACiBI;AADjBH,AAEiB,AAAKI;AAAL,AAAY,AAACC,AAAoB,AAASD;;AAF3D,AAAA,AAAAN,AAAAC,AAAAC,AACGE;;AADH,AAAAL,AAAA;;AAAAA;;;AAQF,AAAA,AAAMS;AAAN,AAKE,AAAA,AAACC,AAAgBC,AACD,AAAA,AAAiBC;;AAEnC,AAAA,AAAuBC;AAAvB,AAKE,AAACC,AAAAA,AAAAA;;AACD,AAACL;;AAEH,AAAA,AAAeM;AAAf,AAEE,AAACN","names":["devtools.core.install_BANG_.cljs$core$IFn$_invoke$arity$0","cljs.core/enable-console-print!","G__40203","re-frame.core/dispatch-sync","action__39984__auto__","params__39985__auto__","cljs.core/map?","map__40204","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/vector?","vec__40206","secretary.core/add-route!","js/multis","js/multis.core","js/multis.core.history","multis.core/history","G__40209","G__40210","G__40211","G__40212","js/goog.History","goog.events/listen","goog.history.EventType/NAVIGATE","event","secretary.core/dispatch!","multis.core/render","reagent.core.render.cljs$core$IFn$_invoke$arity$2","multis.views/root-component","js/document","multis.core/clear-cache-and-render!","re-frame.core/clear-subscription-cache!","multis.core/main"],"sourcesContent":["(ns multis.core\r\n  (:require-macros [secretary.core :refer [defroute]])\r\n  (:require [goog.events :as events]\r\n            [reagent.core :as reagent]\r\n            [re-frame.core :as rf]\r\n            [secretary.core :as secretary]\r\n            [devtools.core :as devtools]\r\n\r\n            ; General fx\r\n            [day8.re-frame.http-fx]\r\n\r\n            ; App\r\n            [multis.db]\r\n            [multis.subs]\r\n            [multis.events]\r\n            [multis.views :as v-root])\r\n  (:import [goog History]\r\n           [goog.history EventType]))\r\n\r\n\r\n;; -- Debugging aids ----------------------------------------------------------\r\n(devtools/install!)       ;; we love https://github.com/binaryage/cljs-devtools\r\n(enable-console-print!)   ;; so that println writes to `console.log`\r\n\r\n\r\n;; Put an initial value into app-db.\r\n;; The event handler for `:initialise-db` can be found in `db.cljs`\r\n;; Using the sync version of dispatch means that value is in\r\n;; place before we go onto the next step.\r\n(rf/dispatch-sync [:app/initialise-db])\r\n\r\n;; -- Routes and History ------------------------------------------------------\r\n(defroute \"/\" [] nil)\r\n\r\n(defonce history\r\n  (doto (History.)\r\n    (events/listen EventType.NAVIGATE\r\n                   (fn [event] (secretary/dispatch! (.-token event))))\r\n    (.setEnabled true)))\r\n\r\n\r\n;; -- Entry Point -------------------------------------------------------------\r\n\r\n(defn render\r\n  []\r\n  ;; Render the UI into the HTML's <div id=\"app\" /> element\r\n  ;; The view function `multis.views/todo-app` is the\r\n  ;; root view for the entire UI.\r\n  (reagent/render [v-root/root-component]\r\n                  (.getElementById js/document \"app\")))\r\n\r\n(defn ^:dev/after-load clear-cache-and-render!\r\n  []\r\n  ;; The `:dev/after-load` metadata causes this function to be called\r\n  ;; after shadow-cljs hot-reloads code. We force a UI update by clearing\r\n  ;; the Reframe subscription cache.\r\n  (rf/clear-subscription-cache!)\r\n  (render))\r\n\r\n(defn ^:export main\r\n  []\r\n  (render))\r\n"]}