{"version":3,"sources":["re_com/selection_list.cljs"],"mappings":"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","names":["var_args","G__45884","re-com.selection-list/label-style","js/Error","selected?","as-exclusions?","re_com.selection_list.label_style.cljs$core$IFn$_invoke$arity$3","selected-color","base-style","and__4174__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.selection-list/check-clicked","selections","item-id","ticked?","required?","num-selected","cljs.core/count","only-item","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/as-checked","item","id-fn","on-change","disabled?","label-fn","re-com.box/box","event","G__45920","cljs.core/not","re-com.misc/checkbox","re_com.selection_list.label_style.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/radio-clicked","re-com.selection-list/as-radio","G__45944","re-com.misc/radio-button","re-com.selection-list/list-style","re-com.selection-list/spacing-bordered","re-com.selection-list/spacing-unbordered","re-com.selection-list/selection-list-args-desc","re-com.validate/vector-of-maps?","re-com.validate/set-or-atom?","cljs.core/fn?","cljs.core/ifn?","re-com.validate/string-or-atom?","p__45972","map__45974","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/list-container","choices","model","multi-select?","width","height","max-height","hide-border?","item-renderer","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","selected","cljs.core/PersistentVector","cljs.core/set","items","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__45962#","p1__45963#","p1__45964#","bounds","cljs.core/select-keys","spacing","re-com.box/border","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re-com.selection-list/configure","attributes","re-com.util/fmap","re-com.util/deref-or-value","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-com.selection-list/selection-list","p__45993","map__45995","seq45983","self__4777__auto__","cljs.core/seq","p__46004","map__46005"],"sourcesContent":["(ns re-com.selection-list\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require\r\n    [re-com.text     :refer [label]]\r\n    [re-com.misc     :refer [checkbox radio-button]]\r\n    [re-com.box      :refer [box border h-box v-box]]\r\n    [re-com.validate :refer [vector-of-maps? string-or-atom? set-or-atom?] :refer-macros [validate-args-macro]]\r\n    [re-com.util     :refer [fmap deref-or-value]]))\r\n\r\n;; ----------------------------------------------------------------------------\r\n(defn label-style\r\n  ([selected? as-exclusions?]\r\n    (label-style selected? as-exclusions? nil))\r\n\r\n  ([selected? as-exclusions? selected-color]\r\n    ;;TODO: margin-top required because currently checkbox & radio-button don't center label\r\n    (let [base-style {:margin-top \"1px\"}\r\n          base-style (if (and selected? as-exclusions?)\r\n                       (merge base-style {:text-decoration \"line-through\"})\r\n                       base-style)\r\n          base-style (if (and selected? selected-color)\r\n                       (merge base-style {:color selected-color})\r\n                       base-style)]\r\n          base-style)))\r\n\r\n\r\n(defn- check-clicked\r\n  [selections item-id ticked? required?]\r\n  (let [num-selected (count selections)\r\n        only-item    (when (= 1 num-selected) (first selections))]\r\n    (if (and required? (= only-item item-id))\r\n      selections  ;; prevent unselect of last item\r\n      (if ticked? (conj selections item-id) (disj selections item-id)))))\r\n\r\n(defn- as-checked\r\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\r\n  ;;TODO: Do we really need an anchor now that bootstrap styles not realy being used ?\r\n  (let [item-id (id-fn item)]\r\n    [box\r\n     :class \"list-group-item compact\"\r\n     :attr {:on-click (handler-fn (when-not disabled?\r\n                                    (on-change (check-clicked selections item-id (not (selections item-id)) required?))))}\r\n     :child [checkbox\r\n             :model (some? (selections item-id))\r\n             :on-change #()                                 ;; handled by enclosing box\r\n             :disabled? disabled?\r\n             :label-style (label-style (selections item-id) as-exclusions?)\r\n             :label (label-fn item)]]))\r\n\r\n\r\n(defn- radio-clicked\r\n  [selections item-id required?]\r\n  (if (and required? (selections item-id))\r\n    selections  ;; prevent unselect of radio\r\n    (if (selections item-id) #{} #{item-id})))\r\n\r\n(defn- as-radio\r\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\r\n  (let [item-id (id-fn item)]\r\n    [box\r\n     :class \"list-group-item compact\"\r\n     :attr {:on-click (handler-fn (when-not disabled?\r\n                                    (on-change (radio-clicked selections item-id required?))))}\r\n     :child [radio-button\r\n             :model (first selections)\r\n             :value item-id\r\n             :on-change #()                                 ;; handled by enclosing box\r\n             :disabled? disabled?\r\n             :label-style (label-style (selections item-id) as-exclusions?)\r\n             :label (label-fn item)]]))\r\n\r\n\r\n(def ^:const list-style\r\n  ;;TODO: These should be in CSS resource\r\n  {:overflow-x     \"hidden\"\r\n   :overflow-y     \"auto\"}) ;;TODO this should be handled by scroller later\r\n\r\n(def ^:const spacing-bordered\r\n  {:padding-top    \"0px\"\r\n   :padding-bottom \"0px\"\r\n   :padding-left   \"5px\"\r\n   :padding-right  \"5px\"\r\n   :margin-top     \"5px\"\r\n   :margin-bottom  \"5px\"})\r\n\r\n(def ^:const spacing-unbordered\r\n  {:padding-left   \"0px\"\r\n   :padding-right  \"5px\"\r\n   :padding-top    \"0px\"\r\n   :padding-bottom \"0px\"\r\n   :margin-top     \"0px\"\r\n   :margin-bottom  \"0px\"})\r\n\r\n\r\n(def selection-list-args-desc\r\n  [{:name :choices        :required true                  :type \"vector of choices | atom\"           :validate-fn vector-of-maps? :description [:span \"the selectable items. Elements can be strings or more interesting data items like {:label \\\"some name\\\" :sort 5}. Also see \" [:code \":label-fn\"] \" below (list of maps also allowed)\"]}\r\n   {:name :model          :required true                  :type \"set of :ids within :choices | atom\" :validate-fn set-or-atom?    :description \"the currently selected items. Note: items are considered distinct\"}\r\n   {:name :on-change      :required true                  :type \"set of :ids -> nil | atom\"          :validate-fn fn?             :description [:span \"a callback which will be passed set of the ids (as defined by \" [:code \":id-fn\"] \") of the selected items\"]}\r\n   {:name :id-fn          :required false :default :id    :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\r\n   {:name :label-fn       :required false :default :label :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label\"]}\r\n   {:name :multi-select?  :required false :default true   :type \"boolean | atom\"                                                  :description \"when true, use check boxes, otherwise radio buttons\"}\r\n   {:name :as-exclusions? :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, selected items are shown with struck-out labels\"}\r\n   {:name :required?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, at least one item must be selected. Note: being able to un-select a radio button is not a common use case, so this should probably be set to true when in single select mode\"}\r\n   {:name :width          :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"250px\\\". When specified, item labels may be clipped. Otherwise based on widest label\"}\r\n   {:name :height         :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". Size beyond which items will scroll\"}\r\n   {:name :max-height     :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". If there are less items then this height, box will shrink. If there are more, items will scroll\"}\r\n   {:name :disabled?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the time input will be disabled. Can be atom or value\"}\r\n   {:name :hide-border?   :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the list will be displayed without a border\"}\r\n   {:name :item-renderer  :required false                 :type \"-> nil | atom\"                      :validate-fn fn?             :description \"a function which takes no params and returns nothing. Called for each element during setup, the returned component renders the element, responds to clicks etc.\"}])\r\n\r\n;;TODO hide hover highlights for links when disabled\r\n(defn- list-container\r\n  [{:keys [choices model on-change id-fn label-fn multi-select? as-exclusions? required? width height max-height disabled? hide-border? item-renderer]\r\n    :as   args}]\r\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\r\n  (let [selected (if multi-select? model (-> model first vector set))\r\n        items    (map (if item-renderer\r\n                        #(item-renderer % id-fn selected on-change disabled? label-fn required? as-exclusions?)  ;; TODO do we need to pass id-fn?\r\n                        (if multi-select?\r\n                          #(as-checked % id-fn selected on-change disabled? label-fn required? as-exclusions?)\r\n                          #(as-radio % id-fn selected on-change disabled? label-fn required? as-exclusions?)))\r\n                      choices)\r\n        bounds   (select-keys args [:width :height :max-height])\r\n        spacing  (if hide-border? spacing-unbordered spacing-bordered)]\r\n    ;; In single select mode force selections to one. This causes a second render\r\n    ;; TODO: GR commented this out to fix the bug where #{nil} was being returned for an empty list. Remove when we're sure there are no ill effects.\r\n    #_(when-not (= selected model) (on-change selected))\r\n    [border\r\n     :radius \"4px\"\r\n     :border (when hide-border? \"none\")\r\n     :child  (into [:div {:class \"list-group noselect\" :style (merge list-style bounds spacing)}] items)]))\r\n\r\n\r\n(defn- configure\r\n  \"Augment passed attributes with defaults and deref any atoms\"\r\n  [attributes]\r\n  (merge {:multi-select?  true\r\n          :as-exclusions? false\r\n          :required?      false\r\n          :disabled?      false\r\n          :hide-border?   false\r\n          :id-fn          :id\r\n          :label-fn       :label}\r\n         (fmap deref-or-value attributes)))\r\n\r\n(defn selection-list\r\n  \"Produce a list box with items arranged vertically\"\r\n  [& {:as args}]\r\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\r\n  ;;NOTE: Consumer has complete control over what is selected or not. A current design tradeoff\r\n  ;;      causes all selection changes to trigger a complete list re-render as a result of on-change callback.\r\n  ;;      this approach may be not ideal for very large list choices.\r\n  (fn [& {:as args}]\r\n    [list-container (configure args)]))\r\n"]}