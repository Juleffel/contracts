{"version":3,"sources":["multis/web3_fx.cljs"],"mappings":"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","names":["var_args","G__53824","multis.web3-fx/fn-dispatch","js/Error","evt","multis.web3_fx.fn_dispatch.cljs$core$IFn$_invoke$arity$2","args-base","args-fn","G__53829","re-frame.core/dispatch","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","G__53831","G__53832","re-frame.core/reg-fx","p__53835","map__53837","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","web3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","on-success","on-failure","e53841","multis.cljs-web3/get-accounts","multis.web3_fx.fn_dispatch.cljs$core$IFn$_invoke$arity$1","e","fexpr__53844","G__53849","G__53850","p__53856","map__53857","address","on-error","e53863","multis.cljs-web3/get-balance","fexpr__53868","G__53874","G__53875","p__53876","map__53877","on-tx-error","gas","on-tx-send","on-tx-receipt","on-tx-complete","on-tx-hash","on-tx-confirmation","abi","bin","e53893","contract","multis.cljs-web3/contract-new","multis.cljs-web3/contract-deploy","fexpr__53894","G__53897","G__53898","p__53899","map__53900","e53906","contract-instance","multis.cljs-web3/get-contract","fexpr__53910","fexpr__53907","G__53913","G__53915","p__53916","map__53917","func","args","e53920","multis.cljs-web3/fn-estimate-gas","fexpr__53921","G__53922","G__53923","p__53924","map__53925","e53930","multis.cljs-web3/const-fn-call","fexpr__53931","G__53932","G__53933","p__53934","map__53935","e53937","multis.cljs-web3/fn-send","fexpr__53939","G__53941","G__53942","p__53943","map__53944","token-contract","from","to","deposit","e53946","multis.cljs-web3/approve-tx","fexpr__53947","G__53948","G__53949","p__53952","map__53953","token-address","start-time","sablier-contract","stop-time","e53955","multis.cljs-web3/sablier-create-stream","fexpr__53956"],"sourcesContent":["(ns multis.web3-fx\n  (:require\n   [re-frame.core :as rf]\n\n   [multis.cljs-web3 :as cljs-web3]))\n\n(defn fn-dispatch\n  ([evt]\n   (if evt\n     (fn-dispatch evt [])\n     nil))\n  ([evt args-base]\n   (fn [& args-fn]\n     (rf/dispatch (vec (concat evt args-base args-fn)))\n     nil)))\n\n(rf/reg-fx\n :web3/get-accounts\n (fn [{:keys [:web3 :on-success :on-failure]}]\n   (try\n     (cljs-web3/get-accounts web3 (fn-dispatch on-success) (fn-dispatch on-failure))\n     (catch :default e ((fn-dispatch on-failure) e)))))\n\n(rf/reg-fx\n :web3/get-balance\n (fn [{:keys [:web3 :address :on-success :on-error]}]\n   (try\n     (cljs-web3/get-balance web3 address (fn-dispatch on-success) (fn-dispatch on-error))\n     (catch :default e ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/deploy-contract\n (fn [{:keys [:web3 :abi :bin :address :gas :on-error :on-tx-error :on-tx-hash :on-tx-send :on-tx-receipt :on-tx-confirmation :on-tx-complete]}]\n   (try\n     (let [contract (cljs-web3/contract-new web3 abi bin address gas)]\n       (cljs-web3/contract-deploy\n        contract\n        {:on-tx-error (fn-dispatch on-tx-error)\n         :on-tx-hash (fn-dispatch on-tx-hash)\n         :on-tx-send (fn-dispatch on-tx-send)\n         :on-tx-receipt (fn-dispatch on-tx-receipt)\n         :on-tx-confirmation (fn-dispatch on-tx-confirmation)\n         :on-tx-complete (fn-dispatch on-tx-complete)}))\n     (catch :default e ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/get-contract\n (fn [{:keys [:web3 :abi :address :on-success :on-error]}]\n   (try\n     (let [contract-instance (cljs-web3/get-contract web3 abi address)]\n       ((fn-dispatch on-success) contract-instance))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))\n\n\n(rf/reg-fx\n :web3/fn-estimate-gas\n (fn [{:keys [:contract :address :gas :func :args :on-success :on-error]}]\n   (try\n     (cljs-web3/fn-estimate-gas contract address gas func args\n                                (fn-dispatch on-success)\n                                (fn-dispatch on-error))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/const-fn-call\n (fn [{:keys [:contract :func :args :on-success :on-error]}]\n   (try\n     (cljs-web3/const-fn-call contract func args\n                              (fn-dispatch on-success)\n                              (fn-dispatch on-error))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/fn-send\n (fn [{:keys [:contract :address :gas :func :args :on-success :on-error]}]\n   (try\n     (cljs-web3/fn-send contract address gas func args\n                        (fn-dispatch on-success)\n                        (fn-dispatch on-error))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/approve-tx\n (fn [{:keys [:token-contract :from :to :deposit :on-success :on-error]}]\n   (try\n     (cljs-web3/approve-tx token-contract from to deposit\n                           (fn-dispatch on-success)\n                           (fn-dispatch on-error))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))\n\n(rf/reg-fx\n :web3/sablier-create-stream\n (fn [{:keys [:sablier-contract :token-address :from :to :deposit :start-time :stop-time :on-success :on-error]}]\n   (try\n     (cljs-web3/sablier-create-stream sablier-contract token-address from to deposit start-time stop-time\n                                      (fn-dispatch on-success)\n                                      (fn-dispatch on-error))\n     (catch :default e\n       ((fn-dispatch on-error) e)))))"]}