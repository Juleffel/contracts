{"version":3,"sources":["re_com/dropdown.cljs"],"mappings":"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","names":["re-com.dropdown/move-to-new-choice","choices","id-fn","id","offset","current-index","re_com.util.position_for_id.cljs$core$IFn$_invoke$arity$variadic","new-index","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/mod","and__4174__auto__","G__45458","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","re-com.dropdown/choices-with-group-headings","opts","group-fn","groups","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","group-headers","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","p1__45461#","cljs.core/PersistentHashMap","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","re-com.dropdown/filter-choices","label-fn","filter-text","lower-filter-text","clojure.string/lower-case","filter-fn","opt","group","label","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","re-com.dropdown/filter-choices-regex","re","e45482","js/RegExp","js/Object","e","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","re-com.dropdown/filter-choices-by-keyword","keyword","value","re-com.dropdown/show-selected-item","node","item-offset-top","item-offset-bottom","parent","parent-height","parent-visible-top","parent-visible-bottom","new-scroll-top","x__4273__auto__","y__4274__auto__","re-com.dropdown/make-group-heading","m","re-com.dropdown/choice-item","on-click","internal-model","mouse-over?","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.core/create-class","this","reagent.core/dom-node","selected","cljs.core/deref","class","event","cljs.core/reset!","re-com.dropdown/make-choice-item","render-fn","callback","markup","re-com.dropdown/filter-text-box-base","filter-box?","key-handler","drop-showing?","set-filter-text","G__45514","re-com.dropdown/filter-text-box","p1__45523#","p1__45524#","cljs.core/with-meta","re-com.dropdown/dropdown-top","ignore-click","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","tab-index","placeholder","dropdown-click","title?","_","reagent.core/set-state","reagent.core/current-component","text","G__45534","re_com.util.item_for_id.cljs$core$IFn$_invoke$arity$variadic","re-com.dropdown/fn-or-vector-of-maps?","v","cljs.core/fn?","re-com.validate/vector-of-maps?","re-com.dropdown/load-choices*","choices-state","regex-filter?","p__45547","map__45548","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","result","error","args","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","G__45550","G__45551","p1__45541#","G__45552","p1__45542#","re-com.dropdown/load-choices","debounce-delay","debounce?","temp__5735__auto__","timer","js/clearTimeout","js/setTimeout","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","re-com.dropdown/single-dropdown-args-desc","cljs.core/ifn?","cljs.core/string?","re-com.validate/number-or-string?","cljs.core/number?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-com.dropdown/single-dropdown","p__45567","map__45569","cljs.core.get.cljs$core$IFn$_invoke$arity$3","js/Error","seq45565","self__4777__auto__","cljs.core/seq","model","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","external-model","re-com.util/deref-or-value","choices-fn?","load-choices","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","p__45577","map__45579","p__45581","map__45582","on-change","disabled?","width","max-height","style","attr","p1__45558#","p1__45559#","latest-ext-model","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","changeable?","cljs.core/not","G__45594","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cancel","filtered-choices","press-enter","press-escape","press-tab","G__45598","press-up","press-down","press-home","press-end","G__45600","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.box/flex-child-style","re-com.box/align-style","p1__45563#","vec__45603","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","p1__45564#","group-names","group-opt-lists","make-a-choice","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","make-choices","make-h-then-choices","h","cljs.core/cons","has-no-group-names?","cljs.core/concat","cljs.core.map.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns re-com.dropdown\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require [re-com.util     :refer [deref-or-value position-for-id item-for-id]]\r\n            [re-com.box      :refer [align-style flex-child-style]]\r\n            [re-com.validate :refer [vector-of-maps? css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\r\n            [clojure.string  :as    string]\r\n            [reagent.core    :as    reagent]))\r\n\r\n;;  Inspiration: http://alxlit.name/bootstrap-chosen\r\n;;  Alternative: http://silviomoreto.github.io/bootstrap-select\r\n\r\n(defn- move-to-new-choice\r\n  \"In a vector of maps (where each map has an :id), return the id of the choice offset posititions away\r\n   from id (usually +1 or -1 to go to next/previous). Also accepts :start and :end\"\r\n  [choices id-fn id offset]\r\n  (let [current-index (position-for-id id choices :id-fn id-fn)\r\n        new-index     (cond\r\n                        (= offset :start)    0\r\n                        (= offset :end)      (dec (count choices))\r\n                        (nil? current-index) 0\r\n                        :else                (mod (+ current-index offset) (count choices)))]\r\n    (when (and new-index (pos? (count choices)))\r\n      (id-fn (nth choices new-index)))))\r\n\r\n\r\n(defn- choices-with-group-headings\r\n  \"If necessary, inserts group headings entries into the choices\"\r\n  [opts group-fn]\r\n  (let [groups         (partition-by group-fn opts)\r\n        group-headers  (->> groups\r\n                            (map first)\r\n                            (map group-fn)\r\n                            (map #(hash-map :id (gensym) :group %)))]\r\n    [group-headers groups]))\r\n\r\n\r\n(defn- filter-choices\r\n  \"Filter a list of choices based on a filter string using plain string searches (case insensitive). Less powerful\r\n   than regex's but no confusion with reserved characters\"\r\n  [choices group-fn label-fn filter-text]\r\n  (let [lower-filter-text (string/lower-case filter-text)\r\n        filter-fn         (fn [opt]\r\n                            (let [group (if (nil? (group-fn opt)) \"\" (group-fn opt))\r\n                                  label (str (label-fn opt))]\r\n                              (or\r\n                                (>= (.indexOf (string/lower-case group) lower-filter-text) 0)\r\n                                (>= (.indexOf (string/lower-case label) lower-filter-text) 0))))]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn- filter-choices-regex\r\n  \"Filter a list of choices based on a filter string using regex's (case insensitive). More powerful but can cause\r\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\r\n  [choices group-fn label-fn filter-text]\r\n  (let [re        (try\r\n                    (js/RegExp. filter-text \"i\")\r\n                    (catch js/Object e nil))\r\n        filter-fn (partial (fn [re opt]\r\n                             (when-not (nil? re)\r\n                               (or (.test re (group-fn opt)) (.test re (label-fn opt)))))\r\n                           re)]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn filter-choices-by-keyword\r\n  \"Filter a list of choices extra data within the choices vector\"\r\n  [choices keyword value]\r\n  (let [filter-fn (fn [opt] (>= (.indexOf (keyword opt) value) 0))]\r\n    (filter filter-fn choices)))\r\n\r\n\r\n(defn show-selected-item\r\n  [node]\r\n  (let [item-offset-top       (.-offsetTop node)\r\n        item-offset-bottom    (+ item-offset-top (.-clientHeight node))\r\n        parent                (.-parentNode node)\r\n        parent-height         (.-clientHeight parent)\r\n        parent-visible-top    (.-scrollTop parent)\r\n        parent-visible-bottom (+ parent-visible-top parent-height)\r\n        new-scroll-top        (cond\r\n                                (> item-offset-bottom parent-visible-bottom) (max (- item-offset-bottom parent-height) 0)\r\n                                (< item-offset-top parent-visible-top)       item-offset-top)]\r\n    (when new-scroll-top (set! (.-scrollTop parent) new-scroll-top))))\r\n\r\n\r\n(defn- make-group-heading\r\n  \"Render a group heading\"\r\n  [m]\r\n  ^{:key (:id m)} [:li.group-result\r\n                   (:group m)])\r\n\r\n\r\n(defn- choice-item\r\n  \"Render a choice item and set up appropriate mouse events\"\r\n  [id label on-click internal-model]\r\n  (let [mouse-over? (reagent/atom false)]\r\n    (reagent/create-class\r\n      {:component-did-mount\r\n       (fn [this]\r\n         (let [node (reagent/dom-node this)\r\n               selected (= @internal-model id)]\r\n           (when selected (show-selected-item node))))\r\n\r\n       :component-did-update\r\n       (fn [this]\r\n         (let [node (reagent/dom-node this)\r\n               selected (= @internal-model id)]\r\n           (when selected (show-selected-item node))))\r\n\r\n       :display-name \"choice-item\"\r\n\r\n       :reagent-render\r\n       (fn\r\n         [id label on-click internal-model]\r\n         (let [selected (= @internal-model id)\r\n               class (if selected\r\n                       \"highlighted\"\r\n                       (when @mouse-over? \"mouseover\"))]\r\n           [:li\r\n            {:class         (str \"active-result group-option \" class)\r\n             :on-mouse-over (handler-fn (reset! mouse-over? true))\r\n             :on-mouse-out  (handler-fn (reset! mouse-over? false))\r\n             :on-mouse-down (handler-fn (on-click id))}\r\n            label]))})))\r\n\r\n\r\n(defn make-choice-item\r\n  [id-fn render-fn callback internal-model opt]\r\n  (let [id (id-fn opt)\r\n        markup (render-fn opt)]\r\n    ^{:key (str id)} [choice-item id markup callback internal-model]))\r\n\r\n\r\n(defn- filter-text-box-base\r\n  \"Base function (before lifecycle metadata) to render a filter text box\"\r\n  [filter-box? filter-text key-handler drop-showing? set-filter-text]\r\n  [:div.chosen-search\r\n   [:input\r\n    {:type          \"text\"\r\n     :auto-complete \"off\"\r\n     :style         (when-not filter-box? {:position \"absolute\" ;; When no filter box required, use it but hide it off screen\r\n                                           :width    \"0px\"      ;; The rest of these styles make the textbox invisible\r\n                                           :padding  \"0px\"\r\n                                           :border   \"none\"})\r\n     :value         @filter-text\r\n     :on-change     (handler-fn (set-filter-text (-> event .-target .-value)))\r\n     :on-key-down   (handler-fn (when-not (key-handler event)\r\n                                  (.preventDefault event))) ;; When key-handler returns false, preventDefault\r\n     :on-blur       (handler-fn (reset! drop-showing? false))}]])\r\n\r\n\r\n(def ^:private filter-text-box\r\n  \"Render a filter text box\"\r\n  (with-meta filter-text-box-base\r\n             {:component-did-mount #(let [node (.-firstChild (reagent/dom-node %))]\r\n                                     (.focus node))\r\n              :component-did-update #(let [node (.-firstChild (reagent/dom-node %))]\r\n                                      (.focus node))}))\r\n\r\n(defn- dropdown-top\r\n  \"Render the top part of the dropdown, with the clickable area and the up/down arrow\"\r\n  []\r\n  (let [ignore-click (atom false)]\r\n    (fn\r\n      [internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\r\n      (let [_    (reagent/set-state (reagent/current-component) {:filter-box? filter-box?})\r\n            text (if @internal-model\r\n                   (label-fn (item-for-id @internal-model choices :id-fn id-fn))\r\n                   placeholder)]\r\n        [:a.chosen-single.chosen-default\r\n         {:href          \"javascript:\"   ;; Required to make this anchor appear in the tab order\r\n          :tab-index     (when tab-index tab-index)\r\n          :on-click      (handler-fn\r\n                           (if @ignore-click\r\n                             (reset! ignore-click false)\r\n                             (dropdown-click)))\r\n          :on-mouse-down (handler-fn\r\n                           (when @drop-showing?\r\n                             (reset! ignore-click true)))  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\r\n          :on-key-down   (handler-fn\r\n                           (key-handler event)\r\n                           (when (= (.-which event) 13)  ;; Pressing enter on an anchor also triggers click event, which we don't want\r\n                             (reset! ignore-click true)))  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\r\n          }\r\n         [:span (when title?\r\n                  {:title text})\r\n          text]\r\n         [:div [:b]]])))) ;; This odd bit of markup produces the visual arrow on the right\r\n\r\n(defn- fn-or-vector-of-maps? ;; Would normally move this to re-com.validate but this is very specific to this component\r\n  [v]\r\n  (or (fn? v)\r\n      (vector-of-maps? v)))\r\n\r\n(defn- load-choices*\r\n  \"Load choices if choices is callback.\"\r\n  [choices-state choices text regex-filter?]\r\n  (let [id (inc (:id @choices-state))\r\n        callback (fn [{:keys [result error] :as args}]\r\n                   (println \"single-dropdown callback\" id args @choices-state)\r\n                   (when (= id (:id @choices-state))\r\n                     (swap! choices-state assoc\r\n                            :loading? false\r\n                            :error error\r\n                            :choices result)))]\r\n    (swap! choices-state assoc\r\n           :loading? true\r\n           :error nil\r\n           :id id\r\n           :timer nil)\r\n    (choices {:filter-text   text\r\n              :regex-filter? regex-filter?}\r\n             #(callback {:result %})\r\n             #(callback {:error %}))))\r\n\r\n(defn- load-choices\r\n  \"Load choices or schedule lodaing depending on debounce?\"\r\n  [choices-state choices debounce-delay text regex-filter? debounce?]\r\n  (when (fn? choices)\r\n    (when-let [timer (:timer @choices-state)]\r\n      (js/clearTimeout timer))\r\n    (if debounce?\r\n      (let [timer (js/setTimeout #(load-choices* choices-state choices text regex-filter?) debounce-delay)]\r\n        (swap! choices-state assoc :timer timer))\r\n      (load-choices* choices-state choices text regex-filter?))))\r\n\r\n;;--------------------------------------------------------------------------------------------------\r\n;; Component: single-dropdown\r\n;;--------------------------------------------------------------------------------------------------\r\n\r\n(def single-dropdown-args-desc\r\n  [{:name :choices       :required true                   :type \"vector of choices | atom | (opts, done, fail) -> nil\" :validate-fn fn-or-vector-of-maps? :description [:span \"Each is expected to have an id, label and, optionally, a group, provided by \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"] \". May also be a callback \" [:code \"(opts, done, fail)\"] \" where opts is map of \" [:code \":filter-text\"] \" and \" [:code \":regex-filter?.\"]]}\r\n   {:name :model         :required true                   :type \"the id of a choice | atom\"                                    :description [:span \"the id of the selected choice. If nil, \" [:code \":placeholder\"] \" text is shown\"]}\r\n   {:name :on-change     :required true                   :type \"id -> nil\"                     :validate-fn fn?               :description [:span \"called when a new choice is selected. Passed the id of new choice\"] }\r\n   {:name :id-fn         :required false :default :id     :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\r\n   {:name :label-fn      :required false :default :label  :type \"choice -> string\"              :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label.\"]}\r\n   {:name :group-fn      :required false :default :group  :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its group identifier\"]}\r\n   {:name :render-fn     :required false                  :type \"choice -> string | hiccup\"     :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns the markup that will be rendered for that choice. Defaults to the label if no custom markup is required.\"]}\r\n   {:name :disabled?     :required false :default false   :type \"boolean | atom\"                                               :description \"if true, no user selection is allowed\"}\r\n   {:name :filter-box?   :required false :default false   :type \"boolean\"                                                      :description \"if true, a filter text field is placed at the top of the dropdown\"}\r\n   {:name :regex-filter? :required false :default false   :type \"boolean | atom\"                                               :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\r\n   {:name :placeholder   :required false                  :type \"string\"                        :validate-fn string?           :description \"background text when no selection\"}\r\n   {:name :title?        :required false :default false   :type \"boolean\"                                                      :description \"if true, allows the title for the selected dropdown to be displayed via a mouse over. Handy when dropdown width is small and text is truncated\"}\r\n   {:name :width         :required false :default \"100%\"  :type \"string\"                        :validate-fn string?           :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\r\n   {:name :max-height    :required false :default \"240px\" :type \"string\"                        :validate-fn string?           :description \"the maximum height of the dropdown part\"}\r\n   {:name :tab-index     :required false                  :type \"integer | string\"              :validate-fn number-or-string? :description \"component's tabindex. A value of -1 removes from order\"}\r\n   {:name :debounce-delay :required false                 :type \"integer\"                       :validate-fn number?           :description [:span \"delay to debounce loading requests when using callback \" [:code \":choices\"]]}\r\n   {:name :class         :required false                  :type \"string\"                        :validate-fn string?           :description \"CSS class names, space separated\"}\r\n   {:name :style         :required false                  :type \"CSS style map\"                 :validate-fn css-style?        :description \"CSS styles to add or override\"}\r\n   {:name :attr          :required false                  :type \"HTML attr map\"                 :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn single-dropdown\r\n  \"Render a single dropdown component which emulates the bootstrap-choosen style. Sample choices object:\r\n     [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\r\n      {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\r\n      {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\r\n      {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\r\n  [& {:keys [choices model regex-filter? debounce-delay]\r\n      :or {debounce-delay 250}\r\n      :as args}]\r\n  {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\r\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\r\n        internal-model (reagent/atom @external-model)         ;; Create a new atom from the model to be used internally\r\n        drop-showing?  (reagent/atom false)\r\n        filter-text    (reagent/atom \"\")\r\n        choices-fn?    (fn? choices)\r\n        choices-state (reagent/atom {:loading? choices-fn?\r\n                                     ; loading error\r\n                                     :error nil\r\n                                     :choices []\r\n                                     ; request id to ignore handling response when new request was already made\r\n                                     :id 0\r\n                                     ; to debounce requests\r\n                                     :timer nil})\r\n        load-choices (partial load-choices choices-state choices debounce-delay)\r\n        set-filter-text (fn [text {:keys [regex-filter?] :as args} debounce?]\r\n                          (load-choices text regex-filter? debounce?)\r\n                          (reset! filter-text text))]\r\n    (load-choices \"\" regex-filter? false)\r\n    (fn [& {:keys [choices model on-change id-fn label-fn group-fn render-fn disabled? filter-box? regex-filter? placeholder title? width max-height tab-index debounce-delay class style attr]\r\n            :or {id-fn :id label-fn :label group-fn :group render-fn label-fn}\r\n            :as args}]\r\n      {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\r\n      (let [choices          (if choices-fn? (:choices @choices-state) (deref-or-value choices))\r\n            disabled?        (deref-or-value disabled?)\r\n            regex-filter?    (deref-or-value regex-filter?)\r\n            latest-ext-model (reagent/atom (deref-or-value model))\r\n            _                (when (not= @external-model @latest-ext-model) ;; Has model changed externally?\r\n                               (reset! external-model @latest-ext-model)\r\n                               (reset! internal-model @latest-ext-model))\r\n            changeable?      (and on-change (not disabled?))\r\n            callback         #(do\r\n                               (reset! internal-model %)\r\n                               (when (and changeable? (not= @internal-model @latest-ext-model))\r\n                                 (on-change @internal-model))\r\n                               (swap! drop-showing? not) ;; toggle to allow opening dropdown on Enter key\r\n                               (set-filter-text \"\" args false))\r\n            cancel           #(do\r\n                               (reset! drop-showing? false)\r\n                               (set-filter-text \"\" args false)\r\n                               (reset! internal-model @external-model))\r\n            dropdown-click   #(when-not disabled?\r\n                               (swap! drop-showing? not))\r\n            filtered-choices (if choices-fn?\r\n                               choices\r\n                               (if regex-filter?\r\n                                 (filter-choices-regex choices group-fn label-fn @filter-text)\r\n                                 (filter-choices choices group-fn label-fn @filter-text)))\r\n            press-enter      (fn []\r\n                               (if disabled?\r\n                                 (cancel)\r\n                                 (callback @internal-model))\r\n                               true)\r\n            press-escape      (fn []\r\n                                (cancel)\r\n                                true)\r\n            press-tab         (fn []\r\n                                (if disabled?\r\n                                  (cancel)\r\n                                  (do  ;; Was (callback @internal-model) but needed a customised version\r\n                                    (when changeable? (on-change @internal-model))\r\n                                    (reset! drop-showing? false)\r\n                                    (set-filter-text \"\" args false)))\r\n                                (reset! drop-showing? false)\r\n                                true)\r\n            press-up          (fn []\r\n                                (if @drop-showing?  ;; Up arrow\r\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model -1))\r\n                                  (reset! drop-showing? true))\r\n                                true)\r\n            press-down        (fn []\r\n                                (if @drop-showing?  ;; Down arrow\r\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model 1))\r\n                                  (reset! drop-showing? true))\r\n                                true)\r\n            press-home        (fn []\r\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :start))\r\n                                true)\r\n            press-end         (fn []\r\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :end))\r\n                                true)\r\n            key-handler      #(if disabled?\r\n                               false\r\n                               (case (.-which %)\r\n                                 13 (press-enter)\r\n                                 27 (press-escape)\r\n                                 9  (press-tab)\r\n                                 38 (press-up)\r\n                                 40 (press-down)\r\n                                 36 (press-home)\r\n                                 35 (press-end)\r\n                                 filter-box?))]  ;; Use this boolean to allow/prevent the key from being processed by the text box\r\n        [:div\r\n         (merge\r\n           {:class (str \"rc-dropdown chosen-container chosen-container-single noselect \" (when @drop-showing? \"chosen-container-active chosen-with-drop \") class)\r\n            :style (merge (flex-child-style (if width \"0 0 auto\" \"auto\"))\r\n                          (align-style :align-self :start)\r\n                          {:width (when width width)}\r\n                          style)}\r\n           attr)          ;; Prevent user text selection\r\n         [dropdown-top internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\r\n         (when (and @drop-showing? (not disabled?))\r\n           (println \"render\" choices-fn? @choices-state)\r\n           [:div.chosen-drop\r\n            [filter-text-box filter-box? filter-text key-handler drop-showing? #(set-filter-text % args true)]\r\n            [:ul.chosen-results\r\n             (when max-height {:style {:max-height max-height}})\r\n             (cond\r\n               (and choices-fn? (:loading? @choices-state))\r\n               [:li.loading (str \"Loading...\")]\r\n               (and choices-fn? (:error @choices-state))\r\n               [:li.error (:error @choices-state)]\r\n               (-> filtered-choices count pos?)\r\n               (let [[group-names group-opt-lists] (choices-with-group-headings filtered-choices group-fn)\r\n                     make-a-choice                 (partial make-choice-item id-fn render-fn callback internal-model)\r\n                     make-choices                  #(map make-a-choice %1)\r\n                     make-h-then-choices           (fn [h opts]\r\n                                                     (cons (make-group-heading h)\r\n                                                           (make-choices opts)))\r\n                     has-no-group-names?           (nil? (:group (first group-names)))]\r\n                 (if (and (= 1 (count group-opt-lists)) has-no-group-names?)\r\n                   (make-choices (first group-opt-lists)) ;; one group means no headings\r\n                   (apply concat (map make-h-then-choices group-names group-opt-lists))))\r\n               :else\r\n               [:li.no-results (str \"No results match \\\"\" @filter-text \"\\\"\")])]])]))))\r\n"]}