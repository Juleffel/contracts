{"version":3,"sources":["multis/cljs_web3.cljs"],"mappings":"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","names":["multis.cljs-web3/baseGas","multis.cljs-web3/create-web3","url","js/Web3","multis.cljs-web3/create-web3-ganache","multis.cljs-web3/create-web3-rinkeby","constructor","rinkeby-provider","given-provider","or__4185__auto__","multis.cljs-web3/eth","web3","multis.cljs-web3/from-wei","number","unit","multis.cljs-web3/get-accounts","on-success","on-failure","G__53693","p1__53689#","p1__53690#","G__53695","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","multis.cljs-web3/get-balance","address","G__53713","p1__53708#","p1__53709#","G__53714","multis.cljs-web3/contract-new","abi","bin","gas","e53718","cljs.core/clj->js","e","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","multis.cljs-web3/call-if-defined","symb","func","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","multis.cljs-web3/get-contract","p__53725","map__53726","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","on-tx-error","cljs.core.get.cljs$core$IFn$_invoke$arity$2","on-tx-hash","on-tx-send","on-tx-receipt","on-tx-confirmation","on-tx-complete","on-error","multis.cljs-web3/contract-deploy","contract","e53728","txn","send-promise","G__53732","fexpr__53729","multis.cljs-web3/const-fn-call","e53735","methods","contract-func","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/js-invoke","call-promise","G__53736","p1__53733#","p1__53734#","multis.cljs-web3/fn-send","e53740","G__53745","p1__53737#","p1__53738#","multis.cljs-web3/fn-estimate-gas","e53749","promise","G__53764","p1__53746#","p1__53747#","multis.cljs-web3/approve-tx","token-contract","from","to","deposit","multis.cljs-web3/sablier-create-stream","sablier-contract","token-address","start-time","stop-time"],"sourcesContent":["(ns multis.cljs-web3)\n\n(def baseGas 450000)\n\n(defn create-web3 [url]\n  ;(println (str \"const web3 = new Web3('\" url \"');\"))\n  (js/Web3. url))\n\n(defn create-web3-ganache []\n  (create-web3 \"http://localhost:8545/\"))\n\n(defn create-web3-rinkeby []\n  (let [constructor (aget js/Web3 \"providers\" \"HttpProvider\")\n        rinkeby-provider (constructor. \"https://rinkeby.infura.io/v3/c9b01e8832f64a60a0c8a26997f89466\")\n        given-provider (aget js/Web3 \"givenProvider\")]\n    (create-web3 (or given-provider rinkeby-provider))))\n\n(defn eth [web3] (aget web3 \"eth\"))\n\n(defn from-wei [number unit]\n  (.fromWei (aget js/Web3 \"utils\") number unit))\n\n(defn get-accounts\n  [web3 on-success on-failure]\n  (doto\n   (.requestAccounts (eth web3))\n    (.then\n     #(on-success (js->clj %))\n     #(on-failure %))))\n\n(defn get-balance\n  [web3 address on-success on-failure]\n  (doto\n   (.getBalance (eth web3) address)\n    (.then\n     #(on-success (js->clj %))\n     #(on-failure %))))\n\n(defn contract-new\n  [web3 abi bin address gas]\n  (try\n    ;(println (str \"const newContract = new web3.eth.Contract(\" (js/JSON.stringify abi) \", {gas: 450000, gasPrice: '20000000000', data: '\" bin \"', from: '\" address \"'})\"))\n    (new (aget (eth web3) \"Contract\")\n         abi\n         (clj->js {:gas gas\n                   :gasPrice \"20000000000\"\n                   :data bin\n                   :from address}))\n    (catch :default e\n      (println \"Could not create contract\" abi bin address)\n      (println e)\n      nil)))\n\n(defn call-if-defined\n  [symb func]\n  (fn [& args]\n    ;(println \"call-if-defined\" symb func args)\n    (when func\n      (apply func args))))\n\n(defn get-contract\n  [web3 abi address]\n  ;(println (str \"const contract = new web3.eth.Contract(\" (js/JSON.stringify abi) \", '\" address \"');\"))\n  (new (aget (eth web3) \"Contract\")\n       abi\n       address))\n\n(defn contract-deploy\n  [contract {:keys [:on-tx-error :on-tx-hash :on-tx-send :on-tx-receipt :on-tx-confirmation :on-tx-complete :on-error]}]\n  (try\n    (let [txn (.deploy contract)\n          send-promise (.send txn (call-if-defined :tx-send on-tx-send))]\n      ;(println (str \"const transaction = newContract.deploy();\"))\n      ;(println (str \"const deployPromise = transaction.send().then(console.log);\"))\n      ;(println send-promise)\n      (doto\n       send-promise\n        (.on \"error\"  (call-if-defined :error on-tx-error)) ; Called with error\n        (.on \"transactionHash\" (call-if-defined :transactionHash on-tx-hash)) ; Called with txn hash\n        (.on \"receipt\" (call-if-defined :receipt on-tx-receipt)) ; Called with receipt\n        (.on \"confirmation\" (call-if-defined :confirmation on-tx-confirmation)) ; Called with confirmationNumber\n        (.then\n         (call-if-defined :complete on-tx-complete)\n         (call-if-defined :complete-error on-error)))) ; Called with newContractInstance\n    (catch :default e\n      (println \"Could not deploy contract\")\n      (println e)\n      ((call-if-defined :complete-error on-error) e)\n      nil)))\n\n(defn const-fn-call\n  [contract func args on-success on-error]\n  (try\n    ;(println (str \"const promise = contract.methods.rectangle(2, 3);\"))\n    ;(println (str \"promise.call().then(res => { console.log(res); });\"))\n    (let [methods (aget contract \"methods\")\n          contract-func (apply (partial js-invoke methods func) args)\n          call-promise (.call contract-func)]\n      (doto\n       call-promise\n        (.then\n         #(on-success %)\n         #(on-error %))))\n    (catch :default e\n      (println \"Could not call contract fn\" func)\n      (println e)\n      (on-error e)\n      nil)))\n\n(defn fn-send\n  [contract address gas func args on-success on-error]\n  (try\n    ;(println (str \"const promise = contract.methods.\" func \"(\" args \");\"))\n    ;(println (str \"promise.send({from: '\" address \"', gas: 4500000}).then(res => { console.log(res); });\"))\n    (let [methods (aget contract \"methods\")\n          contract-func (apply (partial js-invoke methods func) args)\n          send-promise (.send contract-func (clj->js {:from address :gas gas}))]\n      (doto\n       send-promise\n        (.then\n         #(on-success %)\n         #(on-error %))))\n    (catch :default e\n      (println \"Could not send contract fn\" func \"at address\" address)\n      (println e)\n      (on-error e)\n      nil)))\n\n(defn fn-estimate-gas\n  [contract address gas func args on-success on-error]\n  (try\n    ;(println (str \"const promise = contract.methods.rectangle(2, 3);\"))\n    ;(println (str \"promise.estimateGas({from: '\" address \"', gas: 4500000}).then(res => { console.log(res); });\"))\n    (let [methods (aget contract \"methods\")\n          contract-func (apply (partial js-invoke methods func) args)\n          promise (.estimateGas contract-func (clj->js {:from address :gas gas}))]\n      (doto\n       promise\n        (.then\n         #(on-success %)\n         #(on-error %))))\n    (catch :default e\n      (println \"Could not estimate gas for contract fn\" func \"at address\" address)\n      (println e)\n      (on-error e)\n      nil)))\n\n;;; SABLIER\n(defn approve-tx\n  [token-contract from to deposit on-success on-error]\n  (println \"approve-tx\" token-contract from to deposit)\n  (fn-send token-contract from 4500000 \"approve\" [to (int deposit)] on-success on-error))\n\n(defn sablier-create-stream\n  [sablier-contract token-address from to deposit start-time stop-time on-success on-error]\n  (println \"sablier-create-stream\" sablier-contract token-address from to deposit start-time stop-time)\n  (fn-send sablier-contract from 4500000 \"createStream\" [to (int deposit) token-address start-time stop-time] on-success on-error))\n"]}