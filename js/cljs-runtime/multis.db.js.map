{"version":3,"sources":["multis/db.cljs"],"mappings":";;;;;AAQA,AAAA,AAAMA,AACHC;AADH,AACM,AAAKC;AAAL,AAAU,AAACC,AAAEF,AAAE,AAACG,AAAKF;;;AAC3B,AAAA,AAAMG,AAAUC;AAAhB,AAAmB;AAAA,AAAO,AAACC,AAAS,AAAKC;AAAL,AAAQ,AAACF,AAAAA,AAAAA;AAAI,AAACG,AAAMC;;;AAExD,AAAA,AAAMC;AAAN,AACE,AAAA,AACE,AAACE;AADH,AAAAD,AAEkBE;AAFlB,AAEoB,AAAA,AAA4CA;;AAElE,AAAAC,AAAA,AAAA,AAAA,AAAA,AACE,AAACC,AACC,AAAChB,AAAMiB,AACP,AAACZ,AAASM;AAEd,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAwBG;AAExB,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAcI;AACd,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAiBI;AACjB,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAaE;AACb,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAaE;AACb,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAkBE;AAClB,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAkB,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAElB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKG,AACI,AAACb;AAgBV,AAAAI,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAH,AAAAG;AAAA,AAAAA;AAAA,AAAA,AAAAF,AAAAE,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAH,AAAAG,AAAA,AAAAF,AAAAE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["multis.db/type?","t","obj","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","multis.db/make-gen","f","cljs.spec.gen.alpha.fmap.cljs$core$IFn$_invoke$arity$variadic","a","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$1","cljs.core/int?","multis.db/get-web3","e44129","multis.cljs-web3/create-web3-rinkeby","e","cljs.spec.alpha/def-impl","cljs.spec.alpha/with-gen","cljs.core/any?","cljs.core/boolean?","cljs.core/string?","cljs.spec.alpha/map-spec-impl","G__44130","cljs.core/map?","cljs.core/contains?","multis.db/initial-db","G__44131"],"sourcesContent":["(ns multis.db\n  (:require\n   [cljs.spec.alpha :as s]\n   [clojure.spec.gen.alpha :as gen]\n   \n   [multis.cljs-web3 :as cljs-web3]))\n\n;; === UTILS ===\n(defn type?\n  [t] (fn [obj] (= t (type obj))))\n(defn make-gen [f] (fn [] (gen/fmap (fn [a] (f)) (s/gen int?))))\n\n(defn get-web3 []\n  (try\n    (cljs-web3/create-web3-rinkeby)\n    (catch :default e (str \"Caught exception while create Web3: \" e))))\n\n(s/def ::web3\n  (s/with-gen\n    (type? any?)\n    (make-gen get-web3)))\n\n(s/def ::provides-web3? boolean?)\n\n(s/def ::name string?)\n(s/def ::address string?)\n(s/def ::abi any?)\n(s/def ::bin any?)\n(s/def ::instance any?)\n(s/def ::contract (s/keys :req-un [::name ::address ::abi ::bin ::instance]))\n\n(def initial-db\n  {:web3 (get-web3)\n   :streams []\n   :contracts\n   {:test {:name \"test\"\n           :address \"0x681FbA7ceF62673C01184cFa832CE3CE298d7e86\"}\n    :sablier {:name \"sablier\"\n              :address \"0xc04Ad234E01327b24a831e3718DBFcbE245904CC\"}\n    :token {:name \"token\"\n            :address \"0xd6801a1DfFCd0a410336Ef88DeF4320D6DF1883e\"}} ; Compound Ether\n\n   :user-accounts\n   {}\n   :recipient-accounts\n   {}\n   :form-doc {}})\n\n(s/def ::db-spec\n  (s/keys :req-un [::web3]))\n"]}