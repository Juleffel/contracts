{"version":3,"sources":["multis/events.cljs"],"mappings":"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","names":["multis.events/trace","b","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","multis.events/interceptors","re-frame.core/trim-v","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","multis.db/initial-db","_","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","p__44133","p__44134","map__44135","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","db","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__44136","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","path","addresses","p1__44132#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","accounts","address","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/first","multis.events/no-balance-addresses","no-balance-accounts","p1__44140#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core.map.cljs$core$IFn$_invoke$arity$2","multis.utils/reg-trigger-raw","temp__5735__auto__","multis.events/account-addresses","key","cljs.core/vals","p__44141","map__44142","p__44144","vec__44145","iter__4582__auto__","s__44149","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__44151","cljs.core/chunk-buffer","i__44150","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44148","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p__44152","p__44153","map__44154","vec__44155","cljs.core/assoc-in","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","p__44159","vec__44160","amount","multis.cljs-web3/from-wei","p__44163","p__44164","map__44165","vec__44166","contract-name","map__44170","name","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__44172","p__44173","map__44174","vec__44175","map__44179","p__44181","p__44182","map__44183","vec__44184","contract-instance","p__44188","vec__44189","params","p__44192","vec__44193","res","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","p__44196","vec__44197","p__44200","vec__44201","p__44204","vec__44205","resp","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","G__44208","G__44209","re-frame.core/reg-sub","G__44210","G__44211","G__44212","G__44213","p__44214","vec__44215","doc","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__44218","vec__44219","value","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p__44222","vec__44223","f","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__44226","map__44227","map__44229","selected-user-account","selected-recipient-account","stream-amount","stream-duration","now","js/Date","start-time","stop-time","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p__44231","vec__44232","error","p__44235","vec__44236","title","cljs.core/chunk-first"],"sourcesContent":["(ns multis.events\n  (:require\n   [re-frame.core :as rf]\n   \n   [multis.cljs-web3 :as cljs-web3]\n   [multis.web3-events]\n   [multis.utils :as utils]\n\n   [multis.db :refer [initial-db]]))\n\n(defn trace [b]\n  (println b)\n  b)\n\n(def interceptors [rf/trim-v])\n\n(rf/reg-event-fx\n :app/initialise-db\n (fn []\n   {:db initial-db\n    :dispatch-n [[:app/load-user-accounts]\n                 [:app/load-db-contract :sablier]\n                 [:app/load-db-contract :token]]}))\n\n;; Accounts / Balances\n(rf/reg-event-fx\n :app/load-user-accounts\n (fn [_ _]\n   {:dispatch-chain [[[:blockchain/load-accounts]\n                      [:app/accounts-loaded [:user-accounts]]]]}))\n\n(rf/reg-event-fx\n :app/accounts-loaded\n [rf/trim-v]\n (fn [{:keys [:db]} [path addresses]]\n   {:db (update-in db path\n                   #(reduce\n                     (fn [accounts address]\n                       (assoc accounts (keyword address) {:address address}))\n                     % addresses))\n    :dispatch-n [(when addresses [:form-set-value [:selected-user-account] (first addresses)])]}))\n\n(defn no-balance-addresses\n  [accounts]\n  (let [no-balance-accounts (filter #(and (not (:amount %)) (not (:balance-fetched %))) accounts)\n        addresses (map :address no-balance-accounts)]\n    addresses))\n\n(utils/reg-trigger-raw\n :app/fill-balances\n [[:user-accounts]]\n (fn [accounts]\n   (when-let [addresses (no-balance-addresses accounts)]\n     [:app/get-balances :user-accounts addresses])))\n\n(utils/reg-trigger-raw\n :app/fill-balances\n [[:recipient-accounts]]\n (fn [accounts]\n   (when-let [addresses (no-balance-addresses accounts)]\n     [:app/get-balances :recipient-accounts addresses])))\n\n(defn account-addresses\n  [db key]\n  (->> db\n       key\n       vals\n       (map :address)))\n\n(rf/reg-event-fx\n :app/refresh-balances\n [rf/trim-v]\n (fn [{:keys [:db]} _]\n   {:dispatch-n [[:app/get-balances :user-accounts (account-addresses :user-accounts db)]\n                 [:app/get-balances :recipient-accounts (account-addresses :recipient-accounts db)]]}))\n\n(rf/reg-event-fx\n :app/get-balances\n [rf/trim-v]\n (fn [_ [key addresses]]\n   {:dispatch-n (for [address addresses]\n                  [:app/get-balance key address])}))\n\n(rf/reg-event-fx\n :app/get-balance\n [rf/trim-v]\n (fn [{:keys [:db]} [key address]]\n   {:db (assoc-in db [key (keyword address) :balance-fetched] true)\n    :dispatch-chain [[[:blockchain/get-balance address]\n                      [:app/balance-loaded key address]]]}))\n\n(rf/reg-event-db\n :app/balance-loaded\n [rf/trim-v]\n (fn [db [key address amount]]\n   (-> db\n       (assoc-in [key (keyword address) :amount] amount)\n       (assoc-in [key (keyword address) :eth] (cljs-web3/from-wei amount \"ether\")))))\n\n;; CONTRACTS\n(rf/reg-event-fx\n :app/load-db-contract\n interceptors\n (fn [{:keys [db]} [contract-name]]\n   (let [{:keys [name address]} (get-in db [:contracts (keyword contract-name)])]\n     {:dispatch-chain [[[:contract/load-abi name]\n                        [:contract/load-contract address]\n                        [:app/contract-instance-loaded name]]]})))\n\n(rf/reg-event-fx\n :app/load-token-abi\n interceptors\n (fn [_ _]\n   {:dispatch-chain [[[:contract/load-abi \"token\"]\n                      [:app/token-abi-loaded]]]}))\n\n(rf/reg-event-fx\n :app/deploy-db-contract\n interceptors\n (fn [{:keys [db]} [contract-name]]\n   (let [{:keys [name address]} (get-in db [:contracts (keyword contract-name)])]\n     {:dispatch-chain [[[:contract/fetch-compiled-code \"combined\"]\n                        [:contract/deploy-compiled-code name address]\n                        [:app/contract-instance-loaded name]]]})))\n\n;; CONTRACT\n; Once the instance of the contract is loaded:\n(rf/reg-event-fx\n :app/contract-instance-loaded\n interceptors\n (fn [{:keys [db]} [contract-name contract-instance]]\n   (println \"Contract instance loaded.\")\n   {:db (assoc-in db [:contracts (keyword contract-name) :instance] contract-instance)}))\n\n;; CONTRACT-FNS\n(rf/reg-event-fx\n :app/test-rectangle\n interceptors\n (fn [_ [params]]\n   {:dispatch-chain [[[:test-contract-fns/rectangle params]\n                      [:app/test-rectangle-resp]]]}))\n\n(rf/reg-event-db\n :app/test-rectangle-resp\n interceptors\n (fn [db [res]]\n   (println \"Transaction Rectangle done:\" res)\n   (println (:l (js->clj res)))\n   (assoc-in db [:txns :rectangle] res)))\n\n(rf/reg-event-fx\n :app/test-rectangle-estimate\n interceptors\n (fn [_ [params]]\n   {:dispatch-chain [[[:test-contract-fns/estimate-gas-rectangle params]\n                      [:app/log]]]}))\n\n;; SABLIER\n(rf/reg-event-fx\n :app/sablier-create-stream\n interceptors\n (fn [_ [params]]\n   {:dispatch-chain [[[:sablier/create-stream params]\n                      [:app/sablier-stream-created params]]]}))\n\n(rf/reg-event-db\n :app/sablier-stream-created\n interceptors\n (fn [db [params resp]]\n   (update db :streams conj [params resp])))\n\n\n;; FORM\n(rf/reg-sub\n :form-doc\n (fn [db _]\n   (:form-doc db)))\n\n(rf/reg-sub\n :form-value\n :<- [:form-doc]\n (fn [doc [_ path]]\n   (get-in doc path)))\n\n(rf/reg-event-db\n :form-set-value\n (fn [db [_ path value]]\n   (assoc-in db (into [:form-doc] path) value)))\n\n(rf/reg-event-db\n :form-update-value\n (fn [db [_ f path value]]\n   (update-in db (into [:form-doc] path) f value)))\n\n(rf/reg-event-db\n :app/form-submit-new-recipient\n (fn [db]\n   (let [address (get-in db [:form-doc :new-recipient-address])]\n     (if (= (count address) 42)\n       (-> db\n           (assoc-in [:recipient-accounts (keyword address) :address] address)\n           (assoc-in [:form-doc :selected-recipient-account] address)\n           (assoc-in [:form-doc :new-recipient-address] \"\"))\n       db))))\n\n(rf/reg-event-fx\n :app/form-submit-create-stream\n (fn [{:keys [:db]}]\n   (let [{:keys [:selected-user-account\n                 :selected-recipient-account\n                 :stream-amount\n                 :stream-duration]} (:form-doc db)\n         now (int (/ (.now js/Date) 1000))\n         start-time (+ now 120)\n         stop-time (+ now 120 (* 3600 (int stream-duration)))]\n     {:db (assoc db :form-doc\n                 (dissoc (:form-doc db) :stream-amount :stream-duration))\n      :dispatch [:app/sablier-create-stream\n                 {:from selected-user-account\n                  :to selected-recipient-account\n                  :deposit stream-amount\n                  :start-time start-time\n                  :stop-time stop-time}]})))\n\n;; UTILS\n(rf/reg-event-db\n :app/error\n (fn [db [_ error]]\n   (println \"Global error:\" error)\n   (assoc db :global-error error)))\n\n(rf/reg-event-db\n :app/log\n (fn [db [_ title value]]\n   (println \"Log:\" title \":\" value)\n   db))"]}