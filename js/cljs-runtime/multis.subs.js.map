{"version":3,"sources":["multis/subs.cljs"],"mappings":";;;;AAMA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAAC,AACCD;AADDE,AAEC,AAAKE,AAAGC;AAAR,AACE,AAACD,AAAAA,AAAAA,AAAGJ,AAAAA;;AAHP,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;;AAFJ,AAAA,AAAA,AAAML,AAMFQ,AAAWN;AANf,AAOG,AAAAO,AACCD;AADDE,AAEC,AAAKJ,AAAGC;AAAR,AACE,AAACI,AAAOL,AAAGJ;;AAHd,AAAA,AAAAO,AAAAC,AAAAD,AAAAC,AAACL,AAAAA,AAAAA;;;AAPJ,AAAA,AAAA,AAAML;;AAAN,AAYA,AAAAY,AAAA;AAAAC,AAEC,AAAKP,AAAGC;AAAR,AACE,AAACO,AAAK,AAAA,AAACC,AAAIT;;AAHd,AAAA,AAAAM,AAAAC,AAAAD,AAAAC,AAACR,AAAAA,AAAAA;AAKD,AAAAW,AAAA;AAAAC,AAEC,AAAKX,AAAGC;AAAR,AACE,AAACO,AAAK,AAAA,AAACC,AAAIT;;AAHd,AAAA,AAAAU,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;AAKD,AAAA,AAACa;AAED,AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAGC,AAAKC;AAAL,AAAQA;;AAHT,AAAA,AAAAJ,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACjB,AAAAA,AAAAA;AAKD,AAAAmB,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGC,AAAKJ;AAAL,AAAQ,AAAA,AAACK,AAAE,AAACC,AAAMN;;AAHnB,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACtB,AAAAA,AAAAA;AAKD,AAAAyB,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAGC,AAAKV;AAAL,AAAQA;;AAHT,AAAA,AAAAO,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAC5B,AAAAA,AAAAA;AAKD,AAAA6B,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAGC,AAAKd;AAAL,AAAQA;;AAHT,AAAA,AAAAW,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAChC,AAAAA,AAAAA;AAKD,AAAAiC,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAGC,AAAKlB;AAAL,AAAQA;;AAHT,AAAA,AAAAe,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACpC,AAAAA,AAAAA;AAKD,AAAAqC,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA;AAAAC,AAGC,AAAKtB;AAAL,AAAQA;;AAHT,AAAA,AAAAmB,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACxC,AAAAA,AAAAA;AAKD,AAAAyC,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAMC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAUI;AAAV,AAAAH,AAAAD,AAAA,AAAA,AAAYK;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBH,AACKC,AACX,AAAA,AAAKC,AACH,AAAA,AAAKC;;AAVnB,AAAA,AAAAhB,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAT,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAClD,AAAAA,AAAAA;AAYD,AAAA0D,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAzD,AAAAqD,AAAA;AAAAK,AAAA,AAAA1D,AAAAqD,AAAA;AAAAM,AAAA,AAAA3D,AAAAqD,AAAA;AAAAO,AAAA,AAAA5D,AAAAqD,AAAA;AAAA,AACE,AAACQ,AAA2BJ,AAAaC,AAAkBC,AAAOC;;AAJrE,AAAA,AAAAZ,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAC7D,AAAAA,AAAAA;AAMD,AAAAwE,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAAV,AAAA,AAAAzD,AAAAmE,AAAA;AAAAT,AAAA,AAAA1D,AAAAmE,AAAA;AAAAR,AAAA,AAAA3D,AAAAmE,AAAA;AAAAP,AAAA,AAAA5D,AAAAmE,AAAA;AAAA,AACE,AAAAC,AAAKX;AAAL,AAAA,AAAAW;AAAA,AAAAA,AAAkBV;AAAlB,AAAA,AAAAU;AAAA,AAAoC,AAAA,AAAKT,AAAQ,AAAA,AAAKC;;AAAtDQ;;;AAAAA;;;AAJH,AAAA,AAAAN,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAC3E,AAAAA,AAAAA;AAMD,AAAA+E,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAAf,AAAA,AAAA3D,AAAA0E,AAAA;AAAAd,AAAA,AAAA5D,AAAA0E,AAAA;AAAA,AACE,AAAIf,AAAO,AAAA,AAAQC;;AAJtB,AAAA,AAAAS,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAAClF,AAAAA,AAAAA;AAMD,AAAAqF,AAAA;AAAAC,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAGC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAArB,AAAA,AAAA3D,AAAAgF,AAAA;AAAApB,AAAA,AAAA5D,AAAAgF,AAAA;AAAA,AACE,AAAA,AAACnE,AAAI,AAACoE,AAAItB,AAAO,AAAA,AAAQC;;AAJ5B,AAAA,AAAAe,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACxF,AAAAA,AAAAA;AAMD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC4F;AAED,AAAA,AAAC/E;AACD,AAAAgF,AAAA;AAAAC,AAEC,AAAK7F;AAAL,AACE,AAAA,AAAA,AAAIA,AAAYQ;;AAHnB,AAAA,AAAAoF,AAAAC,AAAAD,AAAAC,AAAC9F,AAAAA,AAAAA;AAID,AAAA+F,AAAA;AAAAC,AAEC,AAAAC,AAAKhG;AAAL,AAAA,AAAAiG,AAAAD;AAAA,AAAA5C,AAAA6C,AAAA,AAAA,AAASC;AAAT,AACE,AAAA,AAAA,AAAC7F,AAAOL,AAAakG;;AAHxB,AAAA,AAAAJ,AAAAC,AAAAD,AAAAC,AAAChG,AAAAA,AAAAA","names":["var_args","G__40703","multis.subs/reg-sub-db","js/Error","db-path","G__40705","G__40706","re-frame.core/reg-sub","db","_","event-name","G__40707","G__40708","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__40709","G__40710","cljs.core/vals","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__40712","G__40713","multis.subs.reg_sub_db.cljs$core$IFn$_invoke$arity$1","G__40715","G__40716","G__40717","G__40718","v","G__40727","G__40728","G__40729","G__40730","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","G__40732","G__40733","G__40734","G__40735","G__40737","G__40738","G__40739","G__40740","G__40743","G__40744","G__40745","G__40746","G__40754","G__40755","G__40756","G__40757","G__40759","G__40760","G__40761","G__40762","G__40763","G__40764","G__40765","G__40766","G__40767","G__40768","p__40769","vec__40772","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","u","r","a","d","G__40783","G__40784","G__40785","G__40786","p__40789","map__40790","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","user-address","recipient-address","amount","duration","multis.utils/stream-values-valid?","G__40795","G__40796","G__40797","G__40798","p__40799","map__40800","and__4174__auto__","G__40811","G__40812","G__40813","G__40814","p__40815","map__40816","G__40823","G__40824","G__40825","G__40826","p__40828","map__40830","cljs.core/mod","multis.subs.reg_sub_db.cljs$core$IFn$_invoke$arity$2","G__40841","G__40842","G__40846","G__40847","p__40849","vec__40850","stream-id"],"sourcesContent":["(ns multis.subs\n  (:require\n   [re-frame.core :as rf]\n   [multis.utils :as utils]))\n\n;; Helper for simple db subscriptions\n(defn reg-sub-db\n  ([db-path]\n   (rf/reg-sub\n    db-path\n    (fn [db _]\n      (db db-path))))\n  ([event-name db-path]\n   (rf/reg-sub\n    event-name\n    (fn [db _]\n      (get-in db db-path)))))\n\n(rf/reg-sub\n :user-accounts\n (fn [db _]\n   (vals (get db :user-accounts))))\n\n(rf/reg-sub\n :recipient-accounts\n (fn [db _]\n   (vals (get db :recipient-accounts))))\n\n(reg-sub-db :token-abi)\n\n(rf/reg-sub\n :new-recipient-address\n :<- [:form-value [:new-recipient-address]]\n (fn [v] v))\n\n(rf/reg-sub\n :new-recipient-address-valid?\n :<- [:new-recipient-address]\n (fn [v] (= (count v) 42)))\n\n(rf/reg-sub\n :stream-amount\n :<- [:form-value [:stream-amount]]\n (fn [v] v))\n\n(rf/reg-sub\n :stream-duration\n :<- [:form-value [:stream-duration]]\n (fn [v] v))\n\n(rf/reg-sub\n :selected-user-account\n :<- [:form-value [:selected-user-account]]\n (fn [v] v))\n\n(rf/reg-sub\n :selected-recipient-account\n :<- [:form-value [:selected-recipient-account]]\n (fn [v] v))\n\n(rf/reg-sub\n :stream-values\n :<- [:selected-user-account]\n :<- [:selected-recipient-account]\n :<- [:stream-amount]\n :<- [:stream-duration]\n (fn [[u r a d]]\n   {:user-address u\n    :recipient-address r\n    :amount (int a)\n    :duration (int d)}))\n\n(rf/reg-sub\n :stream-values-valid?\n :<- [:stream-values]\n (fn [{:keys [:user-address :recipient-address :amount :duration]}]\n   (utils/stream-values-valid? user-address recipient-address amount duration)))\n\n(rf/reg-sub\n :stream-values-filled?\n :<- [:stream-values]\n (fn [{:keys [:user-address :recipient-address :amount :duration]}]\n   (and user-address recipient-address (< 0 amount) (< 0 duration))))\n\n(rf/reg-sub\n :stream-values-enough-tokens?\n :<- [:stream-values]\n (fn [{:keys [:amount :duration]}]\n   (>= amount (* 3600 duration))))\n\n(rf/reg-sub\n :stream-values-mod-ok?\n :<- [:stream-values]\n (fn [{:keys [:amount :duration]}]\n   (= 0 (mod amount (* 3600 duration)))))\n\n(reg-sub-db :token-contract-instance [:contracts :MintToken :instance])\n\n(reg-sub-db :adding-stream)\n(rf/reg-sub\n :streams\n (fn [db]\n   (-> db :streams vals)))\n(rf/reg-sub\n :stream\n (fn [db [stream-id]]\n   (get-in db [:streams stream-id])))"]}