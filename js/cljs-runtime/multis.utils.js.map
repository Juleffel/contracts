{"version":3,"sources":["multis/utils.cljs"],"mappings":";;;;AAKA,AAAKA,AAAS,AAAA,AAACC;AACf,AAAA,AAAMC,AAAaC,AAAGC;AAAtB,AAA+B,AAAA,AAAAC,AAACC,AAAMN;AAAP,AAAiB,AAAAK,AAACE,AAAQJ,AAAGC;;;AAC5D,AAAA,AAAMI,AAAaL;AAAnB,AAAuB,AAAA,AAAAM,AAACC,AAAKV,AAASG;;AACtC,AAAA,AAAMQ,AAAgBR;AAAtB,AAA0B,AAAA,AAAAS,AAACN,AAAMN;AAAP,AAAiB,AAAAY,AAACC,AAASV;;;AAErD,AAAA,AAAMW,AACHX,AAAGY,AAAKC;AADX,AAEE,AAAMZ,AACA,AAACa,AACA;AAAA,AACE,AAAMC,AAAY,AAACC,AAAI,AAACC,AAAKX,AAAMY,AAAcN;AAC3CO,AAAM,AAACC,AAAMP,AAAKE;AADxB,AAEE,AAAMI;AAAN,AAAY,AAACE,AAAAA,AAAAA,AAAYF,AAAAA;;AAAzB;;;AALX,AAME,AAACpB,AAAYC,AAAGC;;AAEpB,AAAA,AAAMqB,AACHtB,AAAGY,AAAKO;AADX,AAEE,AAACR,AAAgBX,AAAGY,AACH;AAAOG;AAAP,AACE,AAAM,AAACQ,AAAOC,AAAST;AAAvB,AACEI;;AADF;;;;AADKJ;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAI1B,AAAA,AAAMU,AACHzB;AADH,AAEE,AAAC0B,AAAW,AAACrB,AAAYL;;AACzB,AAACQ,AAAeR;;AAElB,AAAA,AAAM2B,AACHC,AAAaC,AAAkBC,AAAOC;AADzC,AAEE,AAAAC,AAAKJ;AAAL,AAAA,AAAAI;AAAA,AAAAA,AAAkBH;AAAlB,AAAA,AAAAG;AAAA,AAAoC,AAAA,AAAKF,AAAQ,AAAA,AAAKC;;AAAtDC;;;AAAAA","names":["multis.utils/triggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","multis.utils/add-trigger","id","trigger","p1__53203#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","multis.utils/get-trigger","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","multis.utils/remove-trigger","p1__53204#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","multis.utils/reg-trigger-raw","subs","func","reagent.core/track!","subs-values","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","re-frame.core/subscribe","event","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","re-frame.core/dispatch","multis.utils/reg-trigger","cljs.core/every?","cljs.core/identity","multis.utils/unreg-trigger","reagent.core/dispose!","multis.utils/stream-values-valid?","user-address","recipient-address","amount","duration","and__4174__auto__"],"sourcesContent":["(ns multis.utils\r\n  (:require \r\n   [reagent.core :as r]\r\n   [re-frame.core :as rf]))\r\n\r\n(def triggers (atom {}))\r\n(defn add-trigger [id trigger] (swap! triggers #(assoc % id trigger)))\r\n(defn get-trigger [id] (get @triggers id))\r\n(defn remove-trigger [id] (swap! triggers #(dissoc % id)))\r\n\r\n(defn reg-trigger-raw\r\n  [id subs func]\r\n  (let [trigger\r\n        (r/track!\r\n         (fn []\r\n           (let [subs-values (map (comp deref rf/subscribe) subs)\r\n                 event (apply func subs-values)]\r\n             (when event (rf/dispatch event)))))]\r\n    (add-trigger id trigger)))\r\n\r\n(defn reg-trigger\r\n  [id subs event]\r\n  (reg-trigger-raw id subs\r\n                   (fn [& subs-values]\r\n                     (when (every? identity subs-values)\r\n                       event))))\r\n\r\n(defn unreg-trigger\r\n  [id]\r\n  (r/dispose! (get-trigger id))\r\n  (remove-trigger id))\r\n\r\n(defn stream-values-valid?\r\n  [user-address recipient-address amount duration]\r\n  (and user-address recipient-address (< 0 amount) (< 0 duration)))"]}