{"version":3,"sources":["re_frisk_shell/re_com/views.cljs"],"mappings":"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","names":["re-frisk-shell.re-com.views/event-list-item","item","checkbox-val","deb-data","clrs","cljs.core/deref","event","cljs.core/first","trace?","cljs.core/boolean","completed?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","selected?","namespace","clojure.string.split.cljs$core$IFn$_invoke$arity$2","clojure.string/replace","splited-label","clr","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-com.core/h-box","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","re-com.core/box","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","and__4174__auto__","cljs.core/count","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/last","re-frisk-shell.re-com.views/filter-event","text","name","clojure.string/lower-case","cljs.core/name","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","re-frisk-shell.re-com.views/events-scroller","filtered-events","reagent.core/create-class","this","n","reagent.core/dom-node","p1__46575#","re-frisk-shell.re-com.ui/scroller","t","iter__4582__auto__","s__46577","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__46579","cljs.core/chunk-buffer","i__46578","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46576","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","re-frisk-shell.re-com.views/events-view","re-frame-events","imp-hndl","exp-hndl","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","checkbox-sort-val","reagent.ratom/make-reaction","text-val","sorted-events","p1__46580#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","cljs.core/>","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__46581#","p1__46582#","re-com.core/v-box","re-com.core/input-text","cljs.core/reset!","re-frisk-shell.re-com.ui/small-button","re-com.core/checkbox","p1__46583#","re-com.core/gap","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","re-frisk-shell.re-com.views/event-bar","evnt-key","G__46597","fexpr__46596","re-com.core/label","p1__46590#","cljs.core/assoc-in","re-frisk-shell.re-com.views/main-view","re-frame-data","doc","checkbox-sorted-val","open-event-split?","_","re-frisk-shell.re-com.splits/v-split","re-frisk-shell.frisk/handler-frisk","val","js/setTimeout","re-frisk-shell.frisk/main-frisk","re-frisk-shell.frisk/event-frisk","re-frisk-shell.re-com.vendors/star","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frisk-shell.re-com.views/main","p__46636","vec__46639","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq46626","G__46627","cljs.core/next","G__46628","G__46629","self__4776__auto__","re-frisk-shell.re-com.splits/h-split","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk-shell.re-com.views\n  (:require-macros [reagent.ratom :refer [reaction]])\n  (:require [reagent.core :as reagent]\n            [re-frisk-shell.re-com.ui :refer [small-button scroller]]\n            [re-frisk-shell.re-com.vendors :refer [star]]\n            [re-com.core :refer [v-box h-box gap box label\n                                 input-text input-textarea p\n                                 checkbox] :refer-macros [handler-fn]]\n            [re-frisk-shell.re-com.splits :refer [h-split v-split]]\n            [clojure.string :as str]\n            [re-frisk-shell.frisk :as frisk]))\n\n(defn event-list-item []\n  (fn [item checkbox-val deb-data]\n    (let [clrs (:evnt-colors @deb-data)\n          event (str (first (:event item)))\n          trace? (boolean (:trace item))\n          completed? (= :completed (get-in item [:trace :status]))\n          selected? (= (get-in @deb-data [:event-data :indx]) (:indx item))\n          namespace (str/split (str/replace event #\":\" \"\") #\"/\")\n          splited-label (str/split (first namespace) #\"\\.\")\n          clr (get clrs (first (:event item)))]\n      [h-box\n       :children\n       [[:div {:style (merge {:width 5}\n                             (when clr {:background-color (str \"#\" clr)}))}]\n        [box\n         :size \"1\"\n         :child\n         [:a\n          {:href  \"#\"\n           :class (str \"list-group-item\" (when selected? \" active\"))\n           :style (merge {:padding 5 :white-space :pre :width \"100%\"}\n                         (when (and trace? (not completed?))\n                           {:background-color :red}))\n           :on-click #(swap! deb-data assoc :event-data item)}\n          (when (and trace? completed?)\n            [:span (str (get-in item [:trace :duration]) \" ms \")])\n          [:span (if (and @checkbox-val (> (count namespace) 1))\n                   (str \":\" (str/join \".\" (mapv first splited-label))\n                        \"/\" (last namespace))\n                   event)]]]]])))\n\n(defn filter-event [text]\n  (fn [item]\n    (let [name (str/lower-case (name (first (:event item))))\n          text (str/lower-case text)]\n      (not= (str/index-of name text) nil))))\n\n\n(defn events-scroller [filtered-events checkbox-val deb-data]\n  (reagent/create-class\n    {:display-name \"debugger-messages\"\n     :component-did-update\n                   (fn [this]\n                     (let [n (reagent/dom-node this)]\n                       (when (:scroll-bottom? @deb-data)\n                         (set! (.-scrollTop n) (.-scrollHeight n)))))\n     :reagent-render\n                   (fn []\n                     [scroller {:on-scroll #(let [t (.-target %)]\n                                              (swap! deb-data assoc\n                                                     :scroll-bottom?\n                                                     (= (- (.-scrollHeight t) (.-offsetHeight t)) (.-scrollTop t))))}\n                        (for [item @filtered-events]\n                          ^{:key item}\n                          [event-list-item item checkbox-val deb-data])])}))\n\n(defn events-view [re-frame-events deb-data imp-hndl exp-hndl]\n  (let [checkbox-val (reagent/atom true)\n        checkbox-sort-val (reagent/atom false)\n        trace? (reaction (boolean (:trace (first @re-frame-events))))\n        text-val (reagent/atom \"\")\n        sorted-events (reaction (if @checkbox-sort-val\n                                  (sort-by #(get-in % [:trace :duration]) > @re-frame-events)\n                                  @re-frame-events))\n        filtered-events (reaction (if (= @text-val \"\")\n                                    @sorted-events\n                                    (filter (filter-event @text-val) @sorted-events)))]\n    (fn []\n      [v-box\n       :size \"1\"\n       :children [;events filter\n                  [h-box\n                   :children [[box\n                               :size \"1\"\n                               :child\n                               [input-text\n                                :style {:height :auto :padding \"0\"}\n                                :width \"100%\"\n                                :model text-val\n                                :change-on-blur? false\n                                :placeholder \"Filter events\"\n                                :on-change #(reset! text-val %)]]\n                              [small-button {:on-click #(reset! text-val \"\")} \"X\"]]]\n                  ;truncate checkbox\n                  [checkbox\n                   :model checkbox-val\n                   :on-change #(reset! checkbox-val %)\n                   :label \"truncate\"]\n                  (when @trace?\n                    [checkbox\n                     :model checkbox-sort-val\n                     :on-change #(reset! checkbox-sort-val %)\n                     :label \"sort by performance\"])\n                  ;events\n                  [events-scroller filtered-events checkbox-val deb-data]\n                  ;bottom buttons\n                  [h-box\n                   :align :center\n                   :gap \"5px\"\n                   :style {:padding-top 3}\n                   :children [(when imp-hndl [small-button {:on-click imp-hndl} \"import\"])\n                              (when imp-hndl [small-button {:on-click exp-hndl} \"export\"])\n                              [gap :size \"1\"]\n                              [small-button {:on-click #(do (reset! re-frame-events [])\n                                                            (swap! deb-data dissoc :event-data))} \"clear\"]]]]])))\n\n(defn event-bar [deb-data]\n  (let [evnt-key (reaction (first (get-in @deb-data [:event-data :event])))\n        clr (reaction (if @evnt-key (@evnt-key (:evnt-colors @deb-data)) \"\"))]\n    (fn []\n      [h-box\n       :style {:background-color \"#4e5d6c\"}\n       :children\n       [[label :label \"Event\" :style {:margin \"4px\"}]\n        (when @evnt-key\n          [label :label @evnt-key :style {:margin \"4px\" :color \"#df691a\"}])\n        (when @evnt-key\n          [label :label \"#\" :style {:margin \"4px\"}])\n        (when @evnt-key\n          [:input {:style {:width \"60px\"}\n                   :placeholder \"000000\" :type \"text\" :value @clr :max-length \"6\"\n                   :on-change #(swap! deb-data assoc-in [:evnt-colors @evnt-key] (-> % .-target .-value))}])]])))\n\n(defn main-view [re-frame-data deb-data doc]\n  (let [checkbox-sorted-val (reagent/atom true)\n        open-event-split? (reaction (boolean (get-in @deb-data [:event-data :event])))]\n    (fn [_ _ _]\n      [v-box\n       :size \"1\"\n       :style {:padding \"0\"}\n       :children [[box\n                   :style {:background-color \"#4e5d6c\"}\n                   :child [label :label \"Active subscriptions\"]]\n                  [v-split\n                   :document doc\n                   :size \"1\"\n                   :style {:padding \"0\"\n                           :margin  \"0\"}\n                   :initial-split \"0\"\n                   :panel-1 [v-box\n                             :size \"1\"\n                             :children\n                             [[frisk/handler-frisk re-frame-data]]]\n                   :panel-2 [v-box\n                             :size \"1\"\n                             :children\n                             [[v-split\n                               :document doc\n                               :size \"1\"\n                               :style {:padding \"0\"\n                                       :margin  \"0\"}\n                               :initial-split \"100\"\n                               :open-bottom-split? open-event-split?\n                               ;MAIN FRISK\n                               :panel-1 [v-box\n                                         :size \"1\"\n                                         :style {:background-color \"#4e5d6c\"}\n                                         :children\n                                         [[h-box\n                                           :children\n                                           [[label :label \"app-db\"]\n                                            [gap :size \"20px\"]\n                                            [checkbox\n                                              :model checkbox-sorted-val\n                                              :on-change (fn [val]\n                                                           (reset! checkbox-sorted-val val)\n                                                           (swap! (:app-db @re-frame-data) assoc :re-frisk-sorted true)\n                                                           (js/setTimeout #(swap! (:app-db @re-frame-data) dissoc :re-frisk-sorted) 100))\n                                              :label \"sorted\"]]]\n                                          [frisk/main-frisk re-frame-data checkbox-sorted-val]\n                                          [event-bar deb-data]]]\n                               ;event frisk\n                               :panel-2 [v-box\n                                         :size \"1\"\n                                         :children\n                                         [[frisk/event-frisk deb-data]]]]\n                              [h-box\n                               :style {:padding \"0\"}\n                               :children [[gap :size \"1\"]\n                                          [star]]]]]]]])))\n\n(defn main [re-frame-data re-frame-events deb-data & [doc imp-hndl exp-hndl]]\n  [v-box\n   :height \"100%\"\n   :children [[h-split\n               :size \"1\"\n               :initial-split \"20\"\n               :panel-1 [events-view re-frame-events deb-data imp-hndl exp-hndl]\n               :panel-2 [main-view re-frame-data deb-data doc]\n               :document doc]]])\n\n"]}