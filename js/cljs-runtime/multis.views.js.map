{"version":3,"sources":["multis/views.cljs"],"mappings":"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","names":["multis.views/<sub","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","re-frame.core/subscribe","multis.views/>evt","re-frame.core/dispatch","multis.views/form-events","path","G__40714","value","G__40725","G__40726","p1__40731#","multis.views/form-new-recipient","G__40741","reagent-forms.core/bind-fields","address-valid?","G__40747","cljs.core/not","p__40775","map__40777","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","multis.views/account-row","address","eth","mnt","selected-key","selected-address","G__40793","G__40794","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","multis.views/accounts-list-component","accounts","cljs.core.map.cljs$core$IFn$_invoke$arity$2","account","multis.views/user-accounts-component","temp__5733__auto__","G__40818","cljs.core/count","multis.views/recipients-component","G__40827","multis.views/stream-form-template","p1__40832#","multis.views/stream-form","G__40840","stream-valid?","G__40843","stream-values-filled?","G__40844","stream-values-enough-tokens?","G__40845","stream-values-mod-ok?","G__40848","multis.views/action-buttons","G__40858","G__40859","p__40865","map__40866","stream-id","params","balance-to","multis.views/stream-component","map__40871","from","to","deposit","start-time","stop-time","G__40876","multis.views/streams-component","adding-stream","G__40883","streams","G__40884","stream","multis.views/stream-tokens-component","multis.views/root-component"],"sourcesContent":["(ns multis.views\n  (:require\n   [re-frame.core :as rf]\n   [reagent-forms.core :refer [bind-fields]]))\n\n(def <sub (comp deref re-frame.core/subscribe))\n(def >evt re-frame.core/dispatch)\n\n(def form-events\n  {:get (fn [path] (<sub [:form-value path]))\n   :save! (fn [path value] (>evt [:form-set-value path value]))\n   :doc (fn [] (<sub [:form-doc]))})\n\n(comment\n  {:valid? #(if-not (<sub :new-recipient-address-valid?)\n              [\"Address must do 42 characters\"])})\n\n(defn form-new-recipient\n  []\n  [:form\n   {:on-submit #(do\n                  (. % preventDefault)\n                  (>evt [:app/form-submit-new-recipient]))}\n   [bind-fields\n    [:input.input {:field :text :id :new-recipient-address :placeholder \"Type a recipient address (0x...)\"}]\n    form-events]\n   (let [address-valid? (<sub [:new-recipient-address-valid?])]\n     [:input.button {:type \"submit\" :value \"Add new recipient\" :disabled (not address-valid?)}])])\n\n(defn account-row\n  [{:keys [address eth mnt]} selected-key]\n  (let [selected-address (<sub [:form-value [selected-key]])]\n    [:div.account-row\n     {:on-click #(>evt [:form-set-value [selected-key] address])\n      :class [(when (= selected-address address) \"selected\")]}\n     [:div.address address]\n     (when eth\n       [:div.balance\n        [:div.balance-amount eth]\n        [:div.balance-token \"ETH\"]])\n     (when mnt\n       [:div.balance\n        [:div.balance-amount mnt]\n        [:div.balance-token \"MNT\"]])]))\n\n(defn accounts-list-component\n  [accounts selected-key]\n  [:div.accounts-list\n   (map\n    (fn [account]\n      ^{:key (:address account)}\n      [:div\n       [account-row account selected-key]])\n    accounts)])\n\n(defn user-accounts-component\n  []\n  (if-let [accounts (<sub [:user-accounts])]\n    [:div.accounts\n     (if (< 1 (count accounts))\n       [:div.accounts__title \"List of your accounts\"]\n       [:div.accounts__title \"Your account\"])\n     (accounts-list-component accounts :selected-user-account)]\n    [:div.accounts\n     [:div.accounts__title \"Please install Metamask first\"]]))\n\n(defn recipients-component\n  []\n  (let [accounts (<sub [:recipient-accounts])]\n    [:div.accounts\n     [:div.accounts__title \"Recipients\"]\n     (accounts-list-component accounts :selected-recipient-account)\n     [form-new-recipient]]))\n\n(def stream-form-template\n  [:div.stream-inputs\n   [:span \"Stream \"]\n   [:input.input.input-inline {:field :text :id :stream-amount :placeholder \"1000\"}]\n   [:span \" tokens over \"]\n   [:input.input.input-inline {:field :text :id :stream-duration :placeholder \"24\"}]\n   [:span \" hours \"]])\n\n(defn stream-form\n  []\n  [:form.stream-form\n   {:on-submit #(do\n                  (. % preventDefault)\n                  (>evt [:app/form-submit-create-stream]))}\n   [:div.stream-form__title \"Stream tokens\"]\n   [bind-fields stream-form-template form-events]\n   (let [stream-valid? (<sub [:stream-values-valid?])\n         stream-values-filled? (<sub [:stream-values-filled?])\n         stream-values-enough-tokens? (<sub [:stream-values-enough-tokens?])\n         stream-values-mod-ok? (<sub [:stream-values-mod-ok?])]\n     [:div.stream-footer\n      (when (and (not stream-valid?) stream-values-filled?)\n        [:div.stream-helpers\n         (when (not stream-values-enough-tokens?)\n           [:div.stream-help \"Tokens must be more than 3600 * duration\"])\n         (when (not stream-values-mod-ok?)\n           [:div.stream-help \"Tokens must be divisible by 3600 * duration\"])])\n      [:input.button {:type \"submit\" :value \"Stream\"\n                      :disabled (not stream-valid?)}]])])\n\n(defn action-buttons\n  []\n  [:div.action-buttons\n   [:button.button\n    {:on-click #(>evt [:app/refresh-balances])}\n    \"Refresh balances\"]\n   #_[:button.button\n    {:on-click #(>evt [:app/deploy-db-contract \"MintToken\"])}\n    \"Deploy MintToken contract\"]\n   [:button.button\n    {:on-click #(>evt [:app/mint-tokens])}\n    \"Send 1 MNT to my address\"]])\n\n(defn stream-component\n  [{:keys [:stream-id :params :balance-to]}]\n  (let [{:keys [:from :to :deposit :start-time :stop-time]} params]\n    [:div.stream\n     [:div.stream-info\n      [:div\n       \"Stream Id:\"\n       [:span.stream-info__stream-id stream-id]]\n      [:div\n       \"Stream of \"\n       [:span.stream-info__deposit deposit]\n       \" tokens\"]\n      [:div\n       \"From: \"\n       [:span.stream-info__from from]]\n      [:div\n       \"To: \"\n       [:span.stream-info__to to]]\n      [:div\n       \"Times: \"\n       [:span.stream-info__start-time start-time]\n       \" \u2192 \"\n       [:span.stream-info__stop-time stop-time]]\n      [:div\n       \"Current balance: \"\n       [:span.stream-info__balance\n        [:span.stream-balance__amount balance-to]\n        [:span.stream-balance__unit \"MNT\"]]]]\n     [:div.stream-actions\n      [:div.stream-button.stream-buttons__refresh\n       {:on-click #(>evt [:app/sablier-stream-get-balance-to stream-id to])}\n       \"Refresh\"]\n      #_[:div.stream-button.stream-buttons__withdraw\n       {:on-click #(>evt [:app/sablier-stream-withdraw stream-id balance-to])}\n       \"Withdraw\"]]]))\n\n(defn streams-component\n  []\n  [:div.streams\n   (let [adding-stream (<sub [:adding-stream])\n         streams (<sub [:streams])]\n     (when adding-stream\n       [:div \"Creating a stream, please wait...\"])\n     (map\n      (fn [stream]\n        ^{:key (:stream-id stream)}\n        [:div\n         [stream-component stream]])\n      streams))])\n\n(defn stream-tokens-component\n  []\n  [:section.stream-tokens\n   [:div\n    [:div.user-accounts\n     [user-accounts-component]]\n    [:div.recipients-accounts\n     [recipients-component]]\n    [action-buttons]\n    [stream-form]\n    [streams-component]\n    ]])\n\n(defn root-component []\n  [:div\n   [:header\n    [:div.header-title\n     [:h2 \"Multis interview - Julien Fleury\"]]]\n   [stream-tokens-component]])"]}