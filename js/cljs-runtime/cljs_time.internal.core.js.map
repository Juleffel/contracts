{"version":3,"sources":["cljs_time/internal/core.cljs"],"mappings":"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","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","cljs-time.internal.core/=","seq43588","self__4777__auto__","cljs.core/seq","args","p1__43586#","cljs.core/every?","js/goog.date.Date","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p1__43587#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/leap-year?","y","cljs.core/mod","cljs-time.internal.core/days-in-month","cljs-time.internal.core/year-corrected-dim","year","month","G__43591","G__43592","cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","p__43593","map__43594","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/valid-date?","years","months","days","hours","minutes","seconds","millis","d","and__4174__auto__","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/index-of","coll","x","cljs.core/first","p1__43603#","p2__43602#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/format","seq43608","G__43609","cljs.core/next","self__4776__auto__","fmt","cljs.core/Keyword","cljs.core/Symbol","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","G__43618","cljs-time.internal.core/zero-pad","js/Error","n","zeros","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs-time.internal.core/multiplied-by","period","scalar","field","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","scale-fn"],"sourcesContent":["(ns cljs-time.internal.core\n  (:refer-clojure :exclude [=])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]\n   [goog.string.format]))\n\n(defn = [& args]\n  (cond (every? #(instance? goog.date.Date %) args)\n        (apply cljs.core/= (map #(.getTime %) args))\n        :default (apply cljs.core/= args)))\n\n(defn leap-year? [y]\n  (cond (zero? (mod y 400)) true\n        (zero? (mod y 100)) false\n        (zero? (mod y 4)) true\n        :else false))\n\n(def days-in-month [31 28 31 30 31 30 31 31 30 31 30 31])\n\n(defn year-corrected-dim [year month]\n  (cond-> (days-in-month (if (= month 1) 11 (dec month)))\n          (and (leap-year? year) (= month 2)) inc))\n\n(defn valid-date?\n  [{:keys [years months days hours minutes seconds millis] :as d}]\n  (let [months (inc months)]\n    (if (and years\n             (<= 1 months 12)\n             (<= 1 days (year-corrected-dim years months))\n             (<= 0 hours 23)\n             (<= 0 minutes 59)\n             (<= 0 seconds 60)\n             (<= 0 millis 999))\n      d\n      (throw (ex-info \"Date is not valid\" {:type :invalid-date :date d})))))\n\n(defn index-of [coll x]\n  (first (keep-indexed #(when (= %2 x) %1) coll)))\n\n(defn format\n  \"Formats a string using goog.string.format.\"\n  [fmt & args]\n  (let [args (map (fn [x]\n                    (if (or (keyword? x) (symbol? x))\n                      (str x)\n                      x))\n                  args)]\n    (apply gstring/format fmt args)))\n\n(defn zero-pad\n  \"Remove the need to pull in gstring/format code in advanced compilation\"\n  ([n] (if (<= 0 n 9) (str \"0\" n) (str n)))\n  ([n zeros]\n   ; No need to handle negative numbers\n   (if (> 1 zeros)\n     (str n)\n     (str (string/join (take (- zeros (count (str n))) (repeat \"0\")))\n          n))))\n\n(defn multiplied-by [period scalar]\n  (letfn [(scale-fn [field]\n            (when field\n              (* field scalar)))]\n    (-> period\n        (update-in [:millis] scale-fn)\n        (update-in [:seconds] scale-fn)\n        (update-in [:minutes] scale-fn)\n        (update-in [:hours] scale-fn)\n        (update-in [:days] scale-fn)\n        (update-in [:weeks] scale-fn)\n        (update-in [:months] scale-fn)\n        (update-in [:years] scale-fn))))\n"]}