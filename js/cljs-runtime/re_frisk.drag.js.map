{"version":3,"sources":["re_frisk/drag.cljs"],"mappings":";;;;;AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAU,AAAA,AAACC;;AAEpB,AAAA,AAAMC,AAAiBC;AAAvB,AACE,AAAMC,AAAE,AAAwB,AAAUD;AAA1C,AAAA,AAAA,AAAA,AACS,AAAQC,AAAS,AAAOA;;AAEnC,AAAA,AAAMC,AAAoBC;AAA1B,AACE,AAAKH;AAAL,AACE,AAAMI,AAAE,AAAG,AAAWJ,AAAK,AAAA,AAAIG;AACzBE,AAAE,AAAG,AAAWL,AAAK,AAAA,AAAIG;AAD/B,AAEE,AAAA,AAAA,AAAA,AAACG,AAAOT,AAAcO,AAAKC;;;AAEjC,AAAA,AAAME,AAAkBC;AAAxB,AACE,AAAQR;AAAR,AACE,AAACS,AAAqBC,AAAUC,AAAoBH;;;AAExD,AAAA,AAAMI,AAAoBC;AAA1B,AACE,AAAAC,AAAyB,AAACf,AAAgBc;AAA1CC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAmBM;AAAnB,AAAA,AAAA,AACMjB,AAAuB,AAAG,AAAWU,AAAGM,AACjB,AAAG,AAAWN,AAAGO;AACxCZ,AAAmB,AAACN,AAAmBC;AAH7C,AAIE,AAACkB,AAAmBX,AAAUC,AAAoBH;;AAClD,AAAAc,AAAoBZ;AAApBa,AAA8BE;AAA9BD,AAAgD,AAACjB,AAAiBC;AAAlE,AAAA,AAAAc,AAAAC,AAAAC,AAACH","names":["js/re-frisk","js/re-frisk.drag","js/re-frisk.drag.draggable","re-frisk.drag/draggable","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","re-frisk.drag/get-client-rect","evt","r","re-frisk.drag/mouse-move-handler","offset","x","y","cljs.core/reset!","re-frisk.drag/mouse-up-handler","on-move","goog.events/unlisten","js/window","goog.events.EventType/MOUSEMOVE","re-frisk.drag/mouse-down-handler","e","map__43125","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","left","top","goog.events/listen","G__43141","G__43142","G__43143","goog.events.EventType/MOUSEUP"],"sourcesContent":["(ns re-frisk.drag\n  (:require [goog.events :as goog-events]\n            [reagent.core :as reagent])\n  (:import [goog.events EventType]))\n\n;reagent d'n'd - https://github.com/borkdude/draggable-button-in-reagent\n\n(defonce draggable (reagent/atom {}))\n\n(defn get-client-rect [evt]\n  (let [r (.getBoundingClientRect (.-target evt))]\n    {:left (.-left r), :top (.-top r)}))\n\n(defn mouse-move-handler [offset]\n  (fn [evt]\n    (let [x (- (.-clientX evt) (:x offset))\n          y (- (.-clientY evt) (:y offset))]\n      (reset! draggable {:x x :y y}))))\n\n(defn mouse-up-handler [on-move]\n  (fn me [evt]\n    (goog-events/unlisten js/window EventType.MOUSEMOVE on-move)))\n\n(defn mouse-down-handler [e]\n  (let [{:keys [left top]} (get-client-rect e)\n        offset             {:x (- (.-clientX e) left)\n                            :y (- (.-clientY e) top)}\n        on-move            (mouse-move-handler offset)]\n    (goog-events/listen js/window EventType.MOUSEMOVE on-move)\n    (goog-events/listen js/window EventType.MOUSEUP (mouse-up-handler on-move))))"]}