{"version":3,"sources":["re_frisk/core.cljs"],"mappings":"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","names":["re-frisk.core/app-db-diff","cljs.core/deref","re-frisk.diff/diff","re-frisk.data/app-db-prev-event","re-frisk.data/re-frame-data","re-frisk.core/post-event-callback","value","cntx","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-frisk.data/deb-data","cljs.core/first","indx","cljs.core/count","re-frisk.data/re-frame-events","diff","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","or__4185__auto__","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frisk.core/re-frame-sub","seq46896","self__4777__auto__","cljs.core/seq","rest","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__46894#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentHashMap","cljs.core/second","p1__46895#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/ffirst","re-frame.subs/query->reaction","re-frisk.core/render-re-frisk","params","div","js/document","js/onbeforeunload","reagent.core.render.cljs$core$IFn$_invoke$arity$2","re-frisk.devtool/re-frisk-shell","re-frisk.core/enable-re-frisk!","p__46914","vec__46917","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq46909","opts","re-frisk.data/initialized","re-frame.core/reg-sub","G__46920","G__46921","db","_","re_frame.core.register_sub.cljs$core$IFn$_invoke$arity$variadic","reagent.ratom/make-reaction","G__46926","re-frame.core/subscribe","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","re_frame.core.add_post_event_callback.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","re-frame.db/app-db","js/setTimeout","re-frisk.core/enable-frisk!","seq46931","re-frisk.core/add-data","key","data","re-frisk.core/add-in-data","keys","cljs.core/assoc-in","re-frisk.core/watch-context","G__46942","G__46943","G__46944","G__46945","re-frame.core/->interceptor","context","re-frisk.core/reg-view","view","subs","events","cljs.core/set","p1__46949#","G__46953","seq__46954","chunk__46955","count__46956","i__46957","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","s","G__46966","G__46971","re-frisk.core/unmount-view","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc","G__46978","G__46979","fexpr__46977","re-frame.core/reg-event-db","re-frame.core/register-handler","p__46981","vec__46982"],"sourcesContent":["(ns re-frisk.core\n  (:require [reagent.core :as reagent]\n            [reagent.ratom :refer-macros [reaction]]\n            [re-frame.core :refer [subscribe] :as re-frame]\n            [re-frame.db :refer [app-db]]\n            [re-frame.subs :refer [query->reaction]]\n            [re-frisk.data :as data]\n            [re-frisk.devtool :as devtool]\n            [re-frisk.diff :as diff]))\n\n(defn- app-db-diff []\n  (diff/diff @data/app-db-prev-event @(:app-db @data/re-frame-data)))\n\n(defn post-event-callback [value]\n  (let [cntx (get (:contexts @data/deb-data) (first value))\n        indx (count @data/re-frame-events)\n        diff (app-db-diff)]\n    (reset! data/app-db-prev-event @(:app-db @data/re-frame-data))\n    (swap! data/re-frame-events conj\n           (assoc (or cntx {}) :event value :app-db-diff diff :indx indx))))\n\n(defn re-frame-sub [& rest]\n  (reset! (:id-handler @data/re-frame-data)\n          (into {} (map #(hash-map (first %) @(second %))\n                        (remove #(or (= (first (ffirst %)) ::db)\n                                     (nil? (second %)))\n                                @query->reaction)))))\n\n;;RENDER\n\n(defn- render-re-frisk [params]\n  (let [div (.createElement js/document \"div\")]\n    (.appendChild (.-body js/document) div)\n\n    (set! js/onbeforeunload\n          #(when (:win @data/deb-data)\n             ;;TODO https://github.com/flexsurfer/re-frisk/issues/28\n             (.alert (:win @data/deb-data) \"Application has been closed or refreshed. Debugger has been stopped!\")))\n\n    (reagent/render [devtool/re-frisk-shell params] div)))\n\n\n;;ENTRY\n\n(defn enable-re-frisk! [& [opts]]\n  (when-not @data/initialized\n    (reset! data/initialized true)\n\n    (if re-frame.core/reg-sub\n      (re-frame.core/reg-sub ::db (fn [db _] db))\n      (re-frame.core/register-sub ::db (fn [db _] (reaction @db))))\n\n    (reset! data/re-frame-data {:app-db (subscribe [::db])\n                                :id-handler (reagent/atom \"not connected\")})\n\n    (swap! data/deb-data assoc :prefs opts)\n\n    (when-not (= (:events? opts) false)\n      (re-frame/add-post-event-callback post-event-callback))\n\n    (when query->reaction\n      (add-watch app-db :re-frisk-watcher re-frame-sub)\n      (re-frame-sub))\n\n    (js/setTimeout render-re-frisk 100 opts)))\n\n;;TODO Outdated (Not supported)\n\n(defn enable-frisk! [& params]\n  (when-not @data/initialized\n    (do\n      (reset! data/initialized true)\n      (js/setTimeout render-re-frisk 100 (first params)))))\n\n(defn add-data [key data]\n  (swap! data/re-frame-data assoc key data))\n\n(defn add-in-data [keys data]\n  (swap! data/re-frame-data assoc-in keys data))\n\n(def watch-context\n  (re-frame.core/->interceptor\n    :id :re-frisk-watch-context\n    :before (fn [context]\n              (swap! data/deb-data assoc-in [:contexts (-> context :coeffects :event first) :before] context)\n              context)))\n\n(defn reg-view [view subs events]\n  (when (:app-db @data/re-frame-data)\n    (do\n      (swap! data/re-frame-data assoc-in [:views view :events] (set events))\n      (swap! data/re-frame-data assoc-in [:views view :subs] (into {} (map #(hash-map % (subscribe [%])) subs)))\n      (doseq [s subs]\n        (swap! data/re-frame-data assoc-in [:subs s] (subscribe [s]))))))\n\n(defn unmount-view [view]\n  (when (:app-db @data/re-frame-data)\n    (swap! data/re-frame-data update-in [:views] dissoc view)))\n\n((or re-frame.core/reg-event-db re-frame.core/register-handler)\n :re-frisk/update-db (fn [_ [_ value]] value))\n\n(comment (reg-view) (unmount-view))"]}