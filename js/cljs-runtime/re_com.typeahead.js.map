{"version":3,"sources":["re_com/typeahead.cljs"],"mappings":"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","names":["p__45948","map__45950","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-com.typeahead/make-typeahead-state","args","on-change","rigid?","change-on-blur?","data-source","suggestion-to-string","debounce-delay","model","external-model-value","re-com.util/deref-or-value","G__45956","c-input","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","or__4185__auto__","cljs.core/str","re-com.typeahead/debounce","re-com.typeahead/display-suggestion","p__45965","map__45966","re-com.typeahead/event-updates-model?","state","event","G__45969","cljs.core/Keyword","js/Error","and__4174__auto__","cljs.core/not","p__45978","map__45979","re-com.typeahead/event-displays-suggestion?","G__45981","p__45984","map__45986","re-com.typeahead/update-model","new-value","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__46000","map__46001","suggestion","suggestion-string","G__46003","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-com.typeahead/clear-suggestions","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p__46013","map__46015","re-com.typeahead/activate-suggestion-by-index","suggestions","index","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__46020","p__46026","map__46028","re-com.typeahead/choose-suggestion-by-index","p__46037","map__46039","re-com.typeahead/choose-suggestion-active","suggestion-active-index","G__46041","re-com.typeahead/wrap","count","cljs.core/mod","p__46049","map__46051","re-com.typeahead/activate-suggestion-next","G__46054","cljs.core/count","p__46058","map__46059","re-com.typeahead/activate-suggestion-prev","G__46067","re-com.typeahead/reset-typeahead","G__46069","re-com.typeahead/got-suggestions","p__46080","map__46081","re-com.typeahead/input-text-will-blur","input-text","displaying-suggestion?","G__46089","re-com.typeahead/change-data-source","re-com.typeahead/external-model-changed","re-com.typeahead/search-data-source!","state-atom","text","temp__5733__auto__","return-value","G__46099","G__46100","p1__46098#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","re-com.typeahead/search-data-source-loop!","c-search","c__45258__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__45259__auto__","switch__45128__auto__","state_46143","state_val_46144","statearr-46148","cljs.core.async.impl.ioc-helpers/take!","inst_46140","cljs.core.async.impl.ioc-helpers/return-chan","inst_46120","inst_46122","cljs.core/deref","inst_46123","inst_46124","statearr-46152","statearr-46153","statearr-46154","inst_46126","statearr-46155","inst_46128","statearr-46156","inst_46130","statearr-46157","statearr-46158","statearr-46163","state-machine__45129__auto__","ret-value__45130__auto__","result__45131__auto__","cljs.core/keyword-identical?","e46164","js/Object","ex__45132__auto__","statearr-46165","cljs.core.async.impl.ioc-helpers/process-exception","state__45260__auto__","statearr-46166","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","re-com.typeahead/input-text-on-change!","new-text","map__46174","clojure.string/blank?","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","p1__46167#","G__46176","re-com.typeahead/input-text-on-key-down!","pred__46178","expr__46179","cljs.core/=","js/goog.events.KeyCodes.UP","js/goog.events.KeyCodes.DOWN","js/goog.events.KeyCodes.ENTER","js/goog.events.KeyCodes.ESC","js/goog.events.KeyCodes.TAB","cljs.core/not-empty","re-com.typeahead/typeahead-args-desc","cljs.core/fn?","cljs.core/integer?","re-com.validate/input-status-type?","re-com.validate/input-status-types-list","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-com.typeahead/typeahead","p__46203","map__46204","seq46195","self__4777__auto__","cljs.core/seq","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","map__46206","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","input-text-model","reagent.core/cursor","p__46212","map__46215","_on-change","_change-on-blur?","_debounce-delay","render-suggestion","_suggestion-to-string","_rigid?","status","status-icon?","status-tooltip","placeholder","width","height","disabled?","class","style","_attr","map__46217","waiting?","external-model","last-data-source","latest-external-model","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","re-com.box/v-box","re-com.misc/input-text","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-com.box/box","re-com.misc/throbber","iter__4582__auto__","s__46226","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__46228","cljs.core/chunk-buffer","i__46227","vec__46232","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","p1__46194#","cljs.core/chunk-cons","cljs.core/chunk","iter__46225","cljs.core/chunk-rest","vec__46240","cljs.core/first","cljs.core/cons","cljs.core/rest","i","s","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$0","selected?","in","ms","out","state_46309","state_val_46310","inst_46258","statearr-46311","inst_46253","statearr-46312","statearr-46313","inst_46294","statearr-46326","statearr-46327","inst_46279","inst_46296","statearr-46330","statearr-46333","inst_46262","inst_46261","inst_46273","cljs.core/PersistentVector","inst_46274","inst_46275","statearr-46335","cljs.core.async/ioc-alts!","statearr-46337","inst_46307","cljs.core.async.impl.ioc-helpers/put!","inst_46255","statearr-46344","statearr-46345","inst_46304","statearr-46347","statearr-46348","inst_46277","inst_46288","inst_46289","statearr-46351","statearr-46354","statearr-46355","inst_46302","statearr-46356","inst_46278","statearr-46357","inst_46291","statearr-46358","statearr-46359","inst_46300","statearr-46360","inst_46282","statearr-46361","statearr-46362","statearr-46363","statearr-46364","e46365","statearr-46366","statearr-46367","cljs.core.async/timeout","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.typeahead\r\n  (:require-macros [re-com.core :refer [handler-fn]]\r\n                   [cljs.core.async.macros :refer [alt! go-loop]])\r\n  (:require [cljs.core.async :refer [chan timeout <! put!]]\r\n            [re-com.misc     :refer [throbber input-text]]\r\n            [re-com.util     :refer [deref-or-value px]]\r\n            [re-com.popover  :refer [popover-tooltip]] ;; need?\r\n            [re-com.box      :refer [h-box v-box box gap line flex-child-style align-style]] ;; need?\r\n            [re-com.validate :refer [input-status-type? input-status-types-list regex? string-or-hiccup? css-style? html-attr? number-or-string?\r\n                                     string-or-atom? throbber-size? throbber-sizes-list] :refer-macros [validate-args-macro]]\r\n            [reagent.core    :as    reagent]\r\n            [goog.events.KeyCodes]))\r\n\r\n;; TODO\r\n;; ability to focus & blur the input-text would be nice... this is also missing from input-text\r\n;; the typeahead should blur the input-text after a selection is chosen\r\n\r\n(declare debounce display-suggestion)\r\n(defn- make-typeahead-state\r\n  \"Return an initial value for the typeahead state, given `args`.\"\r\n  [{:as args :keys [on-change rigid? change-on-blur? data-source suggestion-to-string debounce-delay model]}]\r\n  (let [external-model-value (deref-or-value model)]\r\n    (cond-> (let [c-input (chan)]\r\n              {:input-text \"\"\r\n               :external-model (deref-or-value model)\r\n               :model          (deref-or-value model)\r\n               :waiting? false\r\n               :suggestions []\r\n               :displaying-suggestion? false\r\n               :suggestion-to-string (or suggestion-to-string str)\r\n               :data-source data-source\r\n               :change-on-blur? change-on-blur?\r\n               :on-change  on-change\r\n               :rigid?     rigid?\r\n               :c-input    c-input\r\n               :c-search   (debounce c-input debounce-delay)})\r\n      external-model-value\r\n      (display-suggestion external-model-value))))\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;; State predicates:  state -> value? -> boolean\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(defn- event-updates-model?\r\n  \"Should `event` update the `typeahead` `model`?\"\r\n  [{:as state :keys [change-on-blur? rigid?]} event]\r\n  (let [change-on-blur? (deref-or-value change-on-blur?)\r\n        rigid?          (deref-or-value rigid?)]\r\n    (case event\r\n      :input-text-blurred   (and change-on-blur? (not rigid?))\r\n      :suggestion-activated (not change-on-blur?)\r\n      :input-text-changed   (not (or change-on-blur? rigid?)))))\r\n\r\n(defn- event-displays-suggestion?\r\n  \"Should `event` cause the `input-text` value to be used to show the active suggestion?\"\r\n  [{:as state :keys [change-on-blur?]} event]\r\n  (let [change-on-blur? (deref-or-value change-on-blur?)]\r\n    (case event\r\n      :suggestion-activated (not change-on-blur?)\r\n      false)))\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;; State update helpers: state -> value? -> next-state\r\n;;   all pure, _except_ that they may call `on-change`\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(defn- update-model\r\n  \"Change the `typeahead` `model` value to `new-value`\"\r\n  [{:as state :keys [on-change]} new-value]\r\n  (when on-change (on-change new-value))\r\n  (assoc state :model new-value))\r\n\r\n(defn- display-suggestion\r\n  \"Change the `input-text` `model` to the string representation of `suggestion`\"\r\n  [{:as state :keys [suggestion-to-string]} suggestion]\r\n  (let [suggestion-string (suggestion-to-string suggestion)]\r\n    (cond-> state\r\n      suggestion-string (assoc :input-text suggestion-string\r\n                               :displaying-suggestion? true))))\r\n\r\n(defn- clear-suggestions\r\n  [state]\r\n  (-> state\r\n      (dissoc :suggestions :suggestion-active-index)))\r\n\r\n(defn- activate-suggestion-by-index\r\n  \"Make the suggestion at `index` the active suggestion\"\r\n  [{:as state :keys [suggestions]} index]\r\n  (let [suggestion (nth suggestions index)]\r\n    (cond-> state\r\n      :always (assoc :suggestion-active-index index)\r\n      (event-updates-model?       state :suggestion-activated) (update-model suggestion)\r\n      (event-displays-suggestion? state :suggestion-activated) (display-suggestion suggestion))))\r\n\r\n(defn- choose-suggestion-by-index\r\n  \"Choose the suggestion at `index`\"\r\n  [{:as state :keys [suggestions]} index]\r\n  (let [suggestion (nth suggestions index)]\r\n    (-> state\r\n        (activate-suggestion-by-index index)\r\n        (update-model suggestion)\r\n        (display-suggestion suggestion)\r\n        clear-suggestions)))\r\n\r\n(defn- choose-suggestion-active\r\n  [{:as state :keys [suggestion-active-index]}]\r\n  (cond-> state\r\n    suggestion-active-index (choose-suggestion-by-index suggestion-active-index)))\r\n\r\n(defn- wrap [index count] (mod (+ count index) count))\r\n\r\n(defn- activate-suggestion-next\r\n  [{:as state :keys [suggestions suggestion-active-index]}]\r\n  (cond-> state\r\n    suggestions\r\n    (activate-suggestion-by-index (-> suggestion-active-index (or -1) inc (wrap (count suggestions))))))\r\n\r\n(defn- activate-suggestion-prev\r\n  [{:as state :keys [suggestions suggestion-active-index]}]\r\n  (cond-> state\r\n    suggestions\r\n    (activate-suggestion-by-index (-> suggestion-active-index (or 0) dec (wrap (count suggestions))))))\r\n\r\n(defn- reset-typeahead\r\n  [state]\r\n  (cond-> state\r\n    :always clear-suggestions\r\n    :always (assoc :waiting? false :input-text \"\" :displaying-suggestion? false)\r\n    (event-updates-model? state :input-text-changed) (update-model nil)))\r\n\r\n(defn- got-suggestions\r\n  \"Update state when new suggestions are available\"\r\n  [state suggestions]\r\n  (-> state\r\n      (assoc :suggestions suggestions\r\n             :waiting? false\r\n             :suggestion-active-index nil)))\r\n\r\n(defn- input-text-will-blur\r\n  \"Update state when the `input-text` is about to lose focus.\"\r\n  [{:keys [input-text displaying-suggestion?] :as state}]\r\n  (cond-> state\r\n    (and (not displaying-suggestion?)\r\n         (event-updates-model? state :input-text-blurred))\r\n    (update-model input-text)))\r\n\r\n(defn- change-data-source\r\n  \"Update `state` given a new `data-source`. Resets the typeahead since any existing suggestions\r\n  came from the old `data-source`.\"\r\n  [state data-source]\r\n  (-> state\r\n      reset-typeahead\r\n      (assoc :data-source data-source)))\r\n\r\n(defn- external-model-changed\r\n  \"Update state when the external model value has changed.\"\r\n  [state new-value]\r\n  (-> state\r\n      (update-model new-value)\r\n      (display-suggestion new-value)\r\n      clear-suggestions))\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;; Functions with side-effects\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(defn- search-data-source!\r\n  \"Call the `data-source` fn with `text`, and then call `got-suggestions` with the result\r\n  (asynchronously, if `data-source` does not return a truthy value).\"\r\n  [data-source state-atom text]\r\n  (if-let [return-value (data-source text #(swap! state-atom got-suggestions %1))]\r\n    (swap! state-atom got-suggestions return-value)\r\n    (swap! state-atom assoc :waiting? true)))\r\n\r\n(defn- search-data-source-loop!\r\n  \"For every value arriving on the `c-search` channel, call `search-data-source!`.\"\r\n  [state-atom c-search]\r\n  (go-loop []\r\n    (let [new-text (<! c-search)\r\n          data-source (:data-source @state-atom)]\r\n      (if (= \"\" new-text)\r\n        (swap! state-atom reset-typeahead)\r\n        (search-data-source! data-source state-atom new-text))\r\n      (recur))))\r\n\r\n(defn- input-text-on-change!\r\n  \"Update state in response to `input-text` `on-change`, and put text on the `c-input` channel\"\r\n  [state-atom new-text]\r\n  (let [{:as state :keys [input-text c-input]} @state-atom]\r\n    (if (= new-text input-text) state ;; keypresses that do not change the value still call on-change, ignore these\r\n        (do\r\n          (when-not (clojure.string/blank? new-text) (put! c-input new-text))\r\n          (swap! state-atom\r\n                 #(cond-> %\r\n                    :always (assoc :input-text new-text :displaying-suggestion? false)\r\n                    (event-updates-model? state :input-text-changed) (update-model new-text)))))))\r\n\r\n(defn- input-text-on-key-down!\r\n  [state-atom event]\r\n  (condp = (.-which event)\r\n    goog.events.KeyCodes.UP     (swap! state-atom activate-suggestion-prev)\r\n    goog.events.KeyCodes.DOWN   (swap! state-atom activate-suggestion-next)\r\n    goog.events.KeyCodes.ENTER  (swap! state-atom choose-suggestion-active)\r\n    goog.events.KeyCodes.ESC    (swap! state-atom reset-typeahead)\r\n    ;; tab requires special treatment\r\n    ;; trap it IFF there are suggestions, otherwise let the input defocus\r\n    goog.events.KeyCodes.TAB\r\n    (if (not-empty (:suggestions @state-atom))\r\n      (do (swap! state-atom activate-suggestion-next)\r\n          (.preventDefault event))\r\n      (swap! state-atom input-text-will-blur))\r\n    true))\r\n\r\n\r\n;; ------------------------------------------------------------------------------------\r\n;;  Component: typeahead\r\n;; ------------------------------------------------------------------------------------\r\n\r\n(def typeahead-args-desc\r\n  [{:name :data-source       :required true                   :type \"fn\"               :validate-fn fn?                :description [:span [:code \":data-source\"] \" supplies suggestion objects. This can either accept a single string argument (the search term), or a string and a callback. For the first case, the fn should return a collection of suggestion objects (which can be anything). For the second case, the fn should return \"[:code \"nil\" ]\", and eventually result in a call to the callback with a collection of suggestion objects.\"]}\r\n   {:name :on-change         :required false :default nil     :type \"string -> nil\"    :validate-fn fn?                :description [:span [:code \":change-on-blur?\"] \" controls when it is called. It is passed a suggestion object.\"] }\r\n   {:name :change-on-blur?   :required false :default true    :type \"boolean | atom\"                                   :description [:span \"when true, invoke \" [:code \":on-change\"] \" when the user chooses a suggestion, otherwise invoke it on every change (navigating through suggestions with the mouse or keyboard, or if \"[:code \"rigid?\"]\" is also \"[:code \"false\" ]\", invoke it on every character typed.)\"] }\r\n   {:name :model             :required false :default nil     :type \"object | atom\"                                             :description \"The initial value of the typeahead (should match the suggestion objects returned by \" [:code \":data-source\"] \").\"}\r\n   {:name :debounce-delay    :required false :default 250     :type \"integer\"          :validate-fn integer?           :description [:span \"After receiving input, the typeahead will wait this many milliseconds without receiving new input before calling \" [:code \":data-source\"] \".\"]}\r\n   {:name :render-suggestion :required false                  :type \"render fn\"        :validate-fn fn?                :description \"override the rendering of the suggestion items by passing a fn that returns hiccup forms. The fn will receive two arguments: the search term, and the suggestion object.\"}\r\n   {:name :suggestion-to-string :required false               :type \"suggestion -> string\" :validate-fn fn?            :description \"When a suggestion is chosen, the input-text value will be set to the result of calling this fn with the suggestion object.\"}\r\n   {:name :rigid?            :required false :default true    :type \"boolean | atom\"                                   :description [:span \"If \"[:code \"false\"]\" the user will be allowed to choose arbitrary text input rather than a suggestion from \" [:code \":data-source\"]\". In this case, a string will be supplied in lieu of a suggestion object.\" ]}\r\n\r\n   ;; the rest of the arguments are forwarded to the wrapped `input-text`\r\n   {:name :status            :required false                  :type \"keyword\"          :validate-fn input-status-type? :description [:span \"validation status. \" [:code \"nil/omitted\"] \" for normal status or one of: \" input-status-types-list]}\r\n   {:name :status-icon?      :required false :default false   :type \"boolean\"                                          :description [:span \"when true, display an icon to match \" [:code \":status\"] \" (no icon for nil)\"]}\r\n   {:name :status-tooltip    :required false                  :type \"string\"           :validate-fn string?            :description \"displayed in status icon's tooltip\"}\r\n   {:name :placeholder       :required false                  :type \"string\"           :validate-fn string?            :description \"background text shown when empty\"}\r\n   {:name :width             :required false :default \"250px\" :type \"string\"           :validate-fn string?            :description \"standard CSS width setting for this input\"}\r\n   {:name :height            :required false                  :type \"string\"           :validate-fn string?            :description \"standard CSS height setting for this input\"}\r\n   {:name :disabled?         :required false :default false   :type \"boolean | atom\"                                   :description \"if true, the user can't interact (input anything)\"}\r\n   {:name :class             :required false                  :type \"string\"           :validate-fn string?            :description \"CSS class names, space separated\"}\r\n   {:name :style             :required false                  :type \"CSS style map\"    :validate-fn css-style?         :description \"CSS styles to add or override\"}\r\n   {:name :attr              :required false                  :type \"HTML attr map\"    :validate-fn html-attr?         :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\r\n\r\n(defn typeahead\r\n  \"typeahead reagent component\"\r\n  [& {:keys [] :as args}]\r\n  {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\r\n  (let [{:as state :keys [c-search c-input]} (make-typeahead-state args)\r\n        state-atom (reagent/atom state)\r\n        input-text-model (reagent/cursor state-atom [:input-text])]\r\n    (search-data-source-loop! state-atom c-search)\r\n    (fn\r\n      [& {:as   args\r\n          :keys [data-source _on-change _change-on-blur? model _debounce-delay render-suggestion _suggestion-to-string _rigid?\r\n                 ;; forwarded to wrapped `input-text`:\r\n                 status status-icon? status-tooltip placeholder width height disabled? class style _attr]}]\r\n      {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\r\n      (let [{:as state :keys [suggestions waiting? suggestion-active-index external-model]} @state-atom\r\n            last-data-source (:data-source state)\r\n            latest-external-model (deref-or-value model)\r\n            width (or width \"250px\")]\r\n        (when (not= last-data-source data-source)\r\n          (swap! state-atom change-data-source data-source))\r\n        (when (not= latest-external-model external-model)\r\n          (swap! state-atom external-model-changed latest-external-model))\r\n        [v-box\r\n         :width width\r\n         :children\r\n         [[input-text\r\n           :model          input-text-model\r\n           :class          class\r\n           :style          style\r\n           :disabled?      disabled?\r\n           :status-icon?   status-icon?\r\n           :status         status\r\n           :status-tooltip status-tooltip\r\n           :width          width\r\n           :height         height\r\n           :placeholder    placeholder\r\n           :on-change      (partial input-text-on-change! state-atom)\r\n           :change-on-blur? false\r\n           :attr {:on-key-down (partial input-text-on-key-down! state-atom)}]\r\n          (if (or (not-empty suggestions) waiting?)\r\n            [box\r\n             :style {:position \"relative\"}\r\n             :child [v-box\r\n                     :class \"rc-typeahead-suggestions-container\"\r\n                     :children [(when waiting?\r\n                                  [box :align :center :child [throbber :size :small :class \"rc-typeahead-throbber\"]])\r\n                                (for [[i s] (map vector (range) suggestions)\r\n                                      :let [selected? (= suggestion-active-index i)]]\r\n                                  ^{:key i}\r\n                                  [box\r\n                                   :child (if render-suggestion\r\n                                            (render-suggestion s)\r\n                                            s)\r\n                                   :class (str \"rc-typeahead-suggestion\"\r\n                                               (when selected? \" active\"))\r\n                                   :attr {:on-mouse-over #(swap! state-atom activate-suggestion-by-index i)\r\n                                          :on-mouse-down #(do (.preventDefault %) (swap! state-atom choose-suggestion-by-index i))}])]]])]]))))\r\n\r\n(defn- debounce\r\n  \"Return a channel which will receive a value from the `in` channel only\r\n  if no further value is received on the `in` channel in the next `ms` milliseconds.\"\r\n  [in ms]\r\n  (let [out (chan)]\r\n    (go-loop [last-val nil]\r\n      (let [val (if (nil? last-val) (<! in) last-val)\r\n            timer (timeout ms)]\r\n        (let [v (alt!\r\n                  in ([val _] val)\r\n                  timer (do (>! out val) nil))]\r\n          (recur v))))\r\n    out))\r\n"]}