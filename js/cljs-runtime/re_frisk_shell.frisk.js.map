{"version":3,"sources":["re_frisk_shell/frisk.cljs"],"mappings":"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","names":["re-frisk-shell.frisk/debounce-pending","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-frisk-shell.frisk/debounce","key","delay","f","old-timeout","G__46376","cljs.core/deref","new-timeout","js/setTimeout","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/clearTimeout","p__46378","map__46379","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-frisk-shell.frisk/ExpandButton","expanded?","path","emit-fn","G__46381","G__46382","re-frisk-shell.frisk/styles","re-frisk-shell.frisk/ExpandAllButton","data","G__46383","G__46384","re-frisk-shell.frisk/CollapseAllButton","G__46385","re-frisk-shell.frisk/edit-debounce-ms","p1__46386#","re-frisk-shell.frisk/FilterEditBox","filter","G__46387","G__46388","G__46389","re-frisk-shell.frisk/FilterReset","G__46390","G__46391","G__46392","p__46393","map__46394","re-frisk-shell.frisk/node-clicked","event","all","G__46396","G__46397","G__46398","re-frisk-shell.frisk/NilText","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","re-frisk-shell.frisk/StringText","re-frisk-shell.frisk/KeywordText","re-frisk-shell.frisk/NumberText","re-frisk-shell.frisk/is-prefix","needle","haystack","cljs.core/count","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","p__46406","map__46407","p1__46405#","re-frisk-shell.frisk/Node","swappable","node","matching-paths","val","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","e","G__46411","G__46412","G__46413","cljs.core/Keyword","cljs.core/name","G__46414","G__46415","G__46416","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/object?","G__46419","G__46420","G__46421","js/Number","re-frisk-shell.frisk/is-expanded","expanded-paths","expanded-matching-paths","or__4185__auto__","p__46430","map__46431","vec__46432","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","re-frisk-shell.frisk/KeyValNode","k","v","re-frisk-shell.frisk/DataFrisk","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__46445","map__46446","re-frisk-shell.frisk/MapNode","cljs.core/empty?","cljs.core/keys","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","x","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__46462","map__46464","re-frisk-shell.frisk/ListVecNode","cljs.core/vector?","p__46485","map__46486","re-frisk-shell.frisk/SetNode","p__46494","map__46495","cljs.core/map?","cljs.core/set?","cljs.core/seq?","cljs.core/native-satisfies?","cljs.core/IDeref","re-frisk-shell.frisk/conj-to-set","coll","re-frisk-shell.frisk/expand-all-paths","root-value","remaining","cljs.core/seq","vec__46506","seq__46507","first__46508","cljs.core/first","cljs.core/next","current","rest","current-node","G__46509","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__46510","vec__46511","cljs.core/coll?","re-frisk-shell.frisk/apply-filter","state","id","re-frisk-shell.filter-parser/parse","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","re-frisk-shell.frisk/emit-fn-factory","state-atom","args","G__46515","js/Error","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/disj","cljs.core/second","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","vec__46516","value","cljs.core/reset!","var_args","G__46520","re-frisk-shell.frisk/walk-paths","re_frisk_shell.frisk.walk_paths.cljs$core$IFn$_invoke$arity$2","prefix","clojure.set/union","p__46524","vec__46526","re-frisk-shell.frisk/matching-paths","filter'","cljs.core/set","p1__46534#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","re-frisk-shell.filter-matcher/match","re_frisk_shell.frisk.walk_paths.cljs$core$IFn$_invoke$arity$1","re-frisk-shell.frisk/prefixes","cljs.core.reductions.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","re-frisk-shell.frisk/expanded-matching-paths","paths","re-frisk-shell.frisk/Root","data-frisk","cljs.core/IAtom","matching","expanded-matching","re-com.core/v-box","re-frisk-shell.re-com.ui/scroller","re-frisk-shell.frisk/expand-by-default","p1__46543#","p2__46544#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.range.cljs$core$IFn$_invoke$arity$1","re-frisk-shell.frisk/main-frisk","re-frame-data","checkbox-sorted-val","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","_","db","db'","and__4174__auto__","e46555","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","re-frisk-shell.frisk/handler-frisk","re-frisk-shell.frisk/event-frisk","deb-data"],"sourcesContent":["(ns re-frisk-shell.frisk\n  (:require [reagent.core :as reagent]\n            [clojure.string :as str]\n            [clojure.set :as set]\n            [cljs.reader :as reader]\n            [cljs.tools.reader.reader-types :as reader-types]\n            [re-frisk-shell.filter-parser :as filter-parser]\n            [re-frisk-shell.filter-matcher :as filter-matcher]\n            [re-com.core :refer [v-box]]\n            [re-frisk-shell.re-com.ui :refer [scroller]]))\n\n;;original idea Odin Hole Standal https://github.com/Odinodin/data-frisk-reagent\n(declare DataFrisk)\n\n(def debounce-pending (atom {}))\n(defn debounce [key delay f]\n  (let [old-timeout (key @debounce-pending)\n        new-timeout (js/setTimeout f delay)]\n    (swap! debounce-pending assoc key new-timeout)\n    (js/clearTimeout old-timeout)))\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style {:border 0\n                    :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :on-click #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"gray\" :color \"gray\"}]]])\n\n(def styles\n  {:shell {:backgroundColor \"#FAFAFA\"\n           :fontFamily \"Consolas,Monaco,Courier New,monospace\"\n           :fontSize \"12px\"\n           :z-index 9999}\n   :strings {:color \"#4Ebb4E\"}\n   :keywords {:color \"purple\"}\n   :numbers {:color \"blue\"}\n   :nil {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :expand-all data)\n            :style {:padding \"0px\"\n                    :borderTopLeftRadius \"2px\"\n                    :borderBottomLeftRadius \"2px\"\n                    :cursor \"pointer\"\n                    :border \"1px solid darkgray\"\n                    :backgroundColor \"white\"}}\n   \"Expand all\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:on-click #(emit-fn :collapse-all)\n            :style {:padding \"0px\"\n                    :cursor \"pointer\"\n                    :borderTopRightRadius \"2px\"\n                    :borderBottomRightRadius \"2px\"\n                    :borderTop \"1px solid darkgray\"\n                    :borderBottom \"1px solid darkgray\"\n                    :borderRight \"1px solid darkgray\"\n                    :borderLeft \"0\"\n                    :backgroundColor \"white\"}}\n   \"Collapse all\"])\n\n(def edit-debounce-ms 400)\n\n(defn FilterEditBox [emit-fn filter]\n  [:input {:type \"text\"\n           :style {:flex 1 :margin-left 5}\n           :value filter\n           :placeholder \"Type here to find keys...\"\n           :on-change #(emit-fn :filter-change (.. % -target -value)\n                                edit-debounce-ms)}])\n\n(defn FilterReset [emit-fn]\n  [:button {:style {:margin-right 5 :width 25}\n            :on-click #(emit-fn :filter-change \"\" 0)} \"X\"])\n\n(defn node-clicked [{:keys [event emit-fn path] :as all}]\n  (.stopPropagation event)\n  (emit-fn :filter-change (str path) 0))\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn is-prefix [needle haystack]\n  (and (< (count needle) (count haystack))\n       (= needle (subvec haystack 0 (count needle)))))\n\n(defn Node [{:keys [data path emit-fn swappable node matching-paths] :as val}]\n  [:span {:style {:padding-top \"5px\"}}\n   (when node\n     [:span {:style {:padding-left \"20px\"}}\n      [Node node]])\n   [:span\n    {:on-click #(node-clicked {:event % :emit-fn emit-fn :path path})\n     :style (merge (when node {:padding-left \"10px\"})\n                   (when (get matching-paths path)\n                     {:background-color \"#fff9db\"}))}\n    (cond\n     (nil? data)\n     [NilText]\n\n     (string? data)\n     (if swappable\n       [:input {:type \"text\"\n                :default-value (str data)\n                :on-change\n                (fn string-changed [e]\n                  (emit-fn :changed path (.. e -target -value)))}]\n       [StringText data])\n\n     (keyword? data)\n     (if swappable\n       [:input {:type \"text\"\n                :default-value (name data)\n                :on-change\n                (fn keyword-changed [e]\n                  (emit-fn :changed path (keyword (.. e -target -value))))}]\n       [KeywordText data])\n\n     (object? data)\n     \"Object\"\n\n     (number? data)\n     (if swappable\n       [:input {:type \"number\"\n                :default-value data\n                :on-change\n                (fn number-changed [e]\n                  (emit-fn :changed path (js/Number (.. e -target -value))))}]\n       [NumberText data])\n     :else\n     (str data))]])\n\n;; A path is expanded if it is explicitly expanded or if it is a part of\n;; current selection\n(defn is-expanded [expanded-paths expanded-matching-paths path]\n  (or (get expanded-paths path)\n      (get expanded-matching-paths path)))\n\n(defn KeyValNode [{[k v] :data :keys [path expanded-paths matching-paths expanded-matching-paths emit-fn swappable]}]\n  [:div {:style {:display \"flex\"}}\n   [DataFrisk {:node {:data k\n                      :emit-fn emit-fn\n                      :path (conj path k)\n                      :matching-paths matching-paths}\n               :data v\n               :swappable swappable\n               :path (conj path k)\n               :expanded-paths expanded-paths\n               :matching-paths matching-paths\n               :expanded-matching-paths expanded-matching-paths\n               :emit-fn emit-fn}]])\n\n(defn MapNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn node] :as all}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" {\"]\n      [:span (str (count (keys data)) \" keys\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i}\n                       [:div {:style {:flex 1}}\n                        [KeyValNode (assoc all :data x)]])\n                     data))]]))\n\n(defn ListVecNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span (if (vector? data) \" [\" \" (\")\n        (str (count data) \" items\")]\n      [:span (if (vector? data) \"]\" \")\")]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data x\n                                                      :swappable swappable\n                                                      :path (conj path i)\n                                                      :expanded-paths expanded-paths\n                                                      :matching-paths matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn emit-fn}]]) data))]]))\n\n(defn SetNode [{:keys [data path expanded-paths matching-paths expanded-matching-paths emit-fn swappable node]}]\n  (let [expanded? (is-expanded expanded-paths expanded-matching-paths path)]\n    [:div {:style {:display \"flex\" :padding-top \"3px\"}}\n     [:div {:style {:flex \"0 1 auto\"}}\n      (if (empty? data)\n        [:div {:style {:width \"20px\"}}]\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}])]\n     [:div {:style {:flex 1}}\n      (when node\n        [Node node])\n      [:span \" #{\"\n        (str (count data) \" items\")]\n      [:span \"}\"]\n      (when expanded?\n        (map-indexed (fn [i x] ^{:key i} [:div {:style {:flex 1}}\n                                          [DataFrisk {:data x\n                                                      :swappable swappable\n                                                      :path (conj path x)\n                                                      :expanded-paths expanded-paths\n                                                      :matching-paths matching-paths\n                                                      :expanded-matching-paths expanded-matching-paths\n                                                      :emit-fn emit-fn}]]) data))]]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [Node all]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths #{}]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n                (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                               :node v})\n                                  current-node))\n                (conj expanded-paths (:path current)))\n              (or (seq? current-node) (vector? current-node))\n              (recur\n                (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                        :node node})\n                                          current-node))\n                (conj expanded-paths (:path current)))\n              :else\n              (recur\n                rest\n                (if (coll? current-node)\n                  (conj expanded-paths (:path current))\n                  expanded-paths))))\n      expanded-paths)))\n\n(defn apply-filter [state id]\n  (let [filter (filter-parser/parse (get-in state [:data-frisk id :raw-filter]))]\n    (assoc-in state [:data-frisk id :filter] filter)))\n\n(defn emit-fn-factory [state-atom id swappable]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom update-in [:data-frisk id :expanded-paths] conj-to-set (first args))\n      :expand-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] (expand-all-paths (first args)))\n      :contract (swap! state-atom update-in [:data-frisk id :expanded-paths] disj (first args))\n      :collapse-all (swap! state-atom assoc-in [:data-frisk id :expanded-paths] #{})\n      :filter-change\n      (do\n        (swap! state-atom assoc-in [:data-frisk id :raw-filter] (first args))\n        (debounce :filter-change (second args)\n                  #(swap! state-atom apply-filter id)))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn walk-paths\n  ([data]\n   (walk-paths [] data))\n  ([prefix data]\n   (conj\n    (cond (map? data)\n          (apply set/union\n                 (map (fn [[k v]] (walk-paths (conj prefix k) v)) data))\n          (set? data)\n          (apply set/union\n                 (map (fn [v] (walk-paths (conj prefix v) v)) data))\n          (or (seq? data) (vector? data))\n          (apply set/union\n                 (map-indexed\n                  (fn [i v] (walk-paths (conj prefix i) v)) data))\n          (satisfies? IDeref data) (walk-paths prefix @data)\n          :else #{})\n    prefix)))\n\n(defn matching-paths [data filter']\n  (set (filter #(filter-matcher/match filter' %) (walk-paths data))))\n\n(defn prefixes [path]\n  (set (reductions conj [] path)))\n\n;; Any node which is a prefix of a matched path needs to be expnaded\n(defn expanded-matching-paths [paths]\n  (apply set/union (map prefixes paths)))\n\n(defn Root [data id state-atom]\n  (let [data-frisk (:data-frisk @state-atom)\n        swappable (when (satisfies? IAtom data)\n                    data)\n        filter (or (get-in data-frisk [id :filter]) [])\n        matching (matching-paths data filter)\n        expanded-matching (expanded-matching-paths matching)\n        emit-fn (emit-fn-factory state-atom id swappable)]\n    [v-box :style {:background-color \"#f3f3f3\" :color \"#444444\"}\n     :size \"1\"\n     :children\n     [[:div {:style {:padding \"4px 2px\" :display \"flex\"}}\n       [ExpandAllButton emit-fn data]\n       [CollapseAllButton emit-fn]\n       [:div {:style {:padding \"2px\" :margin-left \"4px\" :background-color \"#fff9db\"}} (count matching)]\n       [FilterEditBox emit-fn (get-in data-frisk [id :raw-filter])]\n       [FilterReset emit-fn]]\n      [scroller\n       [DataFrisk {:data data\n                   :swappable swappable\n                   :path []\n                   :expanded-paths (get-in data-frisk [id :expanded-paths])\n                   :matching-paths matching\n                   :expanded-matching-paths expanded-matching\n                   :emit-fn emit-fn}]]]]))\n\n(def expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :expanded-paths] #{[]}) {} (range 1)))\n\n(defn main-frisk [re-frame-data checkbox-sorted-val]\n  (let [state-atom (reagent/atom expand-by-default)]\n    (fn [_]\n      (let [db @(:app-db @re-frame-data)\n            db' (if (and @checkbox-sorted-val (map? db))\n                  (try\n                    (into (sorted-map) db)\n                    (catch :default e\n                      (do\n                        (reset! checkbox-sorted-val false)\n                        db)))\n                  db)]\n        [Root db' 0 state-atom]))))\n\n(defn handler-frisk [re-frame-data]\n  (let [state-atom (reagent/atom expand-by-default)]\n    (fn [_]\n      [Root @(:id-handler @re-frame-data) 0 state-atom])))\n\n(defn event-frisk [deb-data]\n  (let [state-atom (reagent/atom expand-by-default)]\n    (fn [_]\n      [Root {:event-vector (get-in @deb-data [:event-data :event])\n             :app-db-diff (get-in @deb-data [:event-data :app-db-diff])}\n       0 state-atom])))\n"]}